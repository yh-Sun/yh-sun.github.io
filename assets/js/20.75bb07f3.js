(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{747:function(t,a,s){"use strict";s.r(a);var e=s(105),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.zhihu.com/answer/2036972744",target:"_blank",rel:"noopener noreferrer"}},[t._v("阿里云开发者-知乎回复（你真的了解Redis吗？）"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"redis的单线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis的单线程"}},[t._v("#")]),t._v(" Redis的单线程")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Redis采用单线程的设计思想，主要是因为Redis的瓶颈是内存和IO，而不是CPU\n单线程编程容易，也容易维护\n多线程会存在死锁、线程上下文切换，甚至会影响性能\n\nRedis6.0引入多线程是为了提高网络IO读写性能\n")])])]),s("h4",{attrs:{id:"redis单线程如何处理那么多的并发客户端连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis单线程如何处理那么多的并发客户端连接"}},[t._v("#")]),t._v(" Redis单线程如何处理那么多的并发客户端连接？")]),t._v(" "),s("p",[t._v("Redis通过IO多路复用实现并发请求的处理，用epoll实现；")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-0d27ec3add9b96947aeac78ec4fa2c7f_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h5",{attrs:{id:"reactor模式-反应堆模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reactor模式-反应堆模式"}},[t._v("#")]),t._v(" Reactor模式：反应堆模式")]),t._v(" "),s("p",[t._v("redis用Reactor模式开发了自己的网络模型，考虑两个问题；")]),t._v(" "),s("p",[t._v("1.为什么使用Reactor模型")]),t._v(" "),s("p",[t._v("通常epoll/kqueue可以支持单机数万的并发，性能上没有问题，但是关联到具体设计上仍然存在一些差异；")]),t._v(" "),s("p",[t._v("首先epoll采集事件，放入队列中等待业务线程的处理，实际业务中可能存在多种请求类型，每个工作线程拿到任务事件后都需要进行相应的处理，当请求线程庞大后，工作线程每次都要多不同请求类型做不同处理，实在太难为它了；")]),t._v(" "),s("p",[t._v("Reactor通过类型的不同来确定使用哪个事件处理器，这样每种处理函数只处理一种业务，符合OO思想；")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-4e93e8efb5e3d1bb3d6b5150fda4bd58_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("handle：读写事件，可以注册到Reactor进行监控\nSynchronous Event Demultiplexer：select/kqueue/epoll等I/O事件采集器\nDispatcher：对事件进行分发\nHandler：事件处理器，完成具体事件的回调\nConcrete Event Handler：具体的事件函数处理程序\n")])])]),s("p",[s("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-0122f3916f25c5b13c5852d9449688bc_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("p",[t._v("2.Redis如何实现自己的Reactor模型")]),t._v(" "),s("p",[t._v("Redis通过I/O复用模型处理请求，客户端发起请求、连接、读写事件后，Redis将其放入队列TaskQueue中，队列中数据有序进出，接着通过事件分发器将事件分发为客户端读数据、客户端写数据 关闭连接 新连接到达，接着通过不同的事件处理器执行函数。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-93bc1b12bf85c567c9a58309b126f685_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pica.zhimg.com/80/v2-6edfc089d75c54b1c4897e85cf2a76aa_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h4",{attrs:{id:"基本数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),s("h5",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),s("p",[t._v("Redis中并没有采用C中传统的字符串，而是通过simple dynamic string（SDS），可以动态扩容，包含：长度、字符数组、未使用的字节数量")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("struct sdshdr{\n    //记录buf数组中已使用字节的数量\n    int len;\n    // 记录buf数组中未使用字节的数量\n    int free;\n    // 字节数组，用于保存字符串\n    char buf[]\n};\n")])])]),s("p",[t._v("SDS的优势：")]),t._v(" "),s("ul",[s("li",[t._v("获取长度时间复杂度O(1)")]),t._v(" "),s("li",[t._v("防止缓冲区溢出bufferoverflow")]),t._v(" "),s("li",[t._v("有效降低内存分配次数")]),t._v(" "),s("li",[t._v("二进制安全：C只能存ascii码，而sds内部是字节数组，可以存图片、音频等，存什么取什么，不会过滤和限制")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-cc708b02a3e5c96eaa5e7d32377a8f94_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h5",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),s("p",[t._v("ziplist")]),t._v(" "),s("p",[t._v("​\t1.所有字符串元素的长度都小于64个字节")]),t._v(" "),s("p",[t._v("​\t2.元素数量小于512个")]),t._v(" "),s("p",[t._v("linkedlist")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-bd8b141d55a9b72d15e98a9833615151_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h5",{attrs:{id:"hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" Hash")]),t._v(" "),s("p",[t._v("ziplist")]),t._v(" "),s("p",[t._v("​\t所有键值对的字符串长度都小于64个字节")]),t._v(" "),s("p",[t._v("​\t键值对数量小于512")]),t._v(" "),s("p",[t._v("hashtable")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("dict {\n\tdictht ht[2]\n}\ndictht {\n\tdictEntry entry\n}\ndictentry {\n\tkey\n\tvalue\n\tnext\n}\n")])])]),s("p",[s("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-008f1b6f4c852c6914b20e854113f80f_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-5cabe29ab218b3191bfbb583e1f09d7f_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h6",{attrs:{id:"hash算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash算法"}},[t._v("#")]),t._v(" Hash算法")]),t._v(" "),s("p",[t._v("Redis使用MurmurHash2算法计算键的哈希值")]),t._v(" "),s("h6",{attrs:{id:"hash冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash冲突"}},[t._v("#")]),t._v(" Hash冲突")]),t._v(" "),s("p",[t._v("解决hash冲突的方法，有以下几种")]),t._v(" "),s("ul",[s("li",[t._v("冲突后，寻找下一个空的散列地址，只要够大，就一定能找到空闲")]),t._v(" "),s("li",[t._v("一次哈希冲突，就再一次哈希，总有不冲突的时候")]),t._v(" "),s("li",[t._v("链地址法，每个索引都有一个next链表，冲突都放next，就像Java HashMap一样")]),t._v(" "),s("li",[t._v("将链表分为基本表和公共溢出区，只要冲突都放溢出区里")])]),t._v(" "),s("h6",{attrs:{id:"rehash扩容收缩过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rehash扩容收缩过程"}},[t._v("#")]),t._v(" rehash扩容收缩过程")]),t._v(" "),s("p",[t._v("渐进式过程，扩容会double，收缩：离已使用的最近的2的次幂数字")]),t._v(" "),s("p",[t._v("1.计算空间")]),t._v(" "),s("p",[t._v("2.数据迁移")]),t._v(" "),s("p",[t._v("3.将原表清空")]),t._v(" "),s("blockquote",[s("p",[t._v("渐进式过程：在rehash期间，如果有增删改查进来，则也需要同步一份数据到新表中，并将rehashidx+1，这种思想将rehash整个表空间所需要的工作分解为具体的增删改查，避免阻塞问题")])]),t._v(" "),s("h5",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),s("p",[t._v("intset")]),t._v(" "),s("p",[t._v("​\t1.所有元素都是整数")]),t._v(" "),s("p",[t._v("​\t2.元素个数小于等于512个")]),t._v(" "),s("p",[t._v("hashtable")]),t._v(" "),s("h5",{attrs:{id:"zset-sorted-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zset-sorted-set"}},[t._v("#")]),t._v(" Zset（Sorted Set）")]),t._v(" "),s("p",[t._v("ziplist")]),t._v(" "),s("p",[t._v("skiplist")]),t._v(" "),s("blockquote",[s("p",[t._v("跳跃表：Redis只有两处使用到了跳跃表，一个是实现有序集合键（sorted set）,另一个是在集群节点中用作内部数据结构。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pica.zhimg.com/80/v2-95d19508487a3b6e6add71b3ca62e32b_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"redis内存回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis内存回收机制"}},[t._v("#")]),t._v(" Redis内存回收机制")]),t._v(" "),s("h4",{attrs:{id:"过期键删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过期键删除"}},[t._v("#")]),t._v(" 过期键删除")]),t._v(" "),s("p",[t._v("过期表，通过定期删除、惰性删除（查的时候再删）")]),t._v(" "),s("h4",{attrs:{id:"内存淘汰机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存淘汰机制"}},[t._v("#")]),t._v(" 内存淘汰机制")]),t._v(" "),s("h3",{attrs:{id:"持久化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#持久化"}},[t._v("#")]),t._v(" 持久化")]),t._v(" "),s("h4",{attrs:{id:"快照rdb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快照rdb"}},[t._v("#")]),t._v(" 快照RDB")]),t._v(" "),s("p",[t._v("存储某个时间点的副本")]),t._v(" "),s("h4",{attrs:{id:"aof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aof"}},[t._v("#")]),t._v(" AOF")]),t._v(" "),s("p",[t._v("持久化每一条更改redis中的数据的命令")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("appendonly yes\n")])])]),s("h3",{attrs:{id:"redis集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis集群"}},[t._v("#")]),t._v(" Redis集群")]),t._v(" "),s("h4",{attrs:{id:"单实例redis架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单实例redis架构"}},[t._v("#")]),t._v(" 单实例Redis架构")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-26e79e0e74a4c9024c857c9aa4871c0c_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h4",{attrs:{id:"集群架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集群架构"}},[t._v("#")]),t._v(" 集群架构")]),t._v(" "),s("p",[t._v("客户端分片")]),t._v(" "),s("p",[t._v("中间层分片")]),t._v(" "),s("p",[t._v("服务端分片（官方集群版本）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-66165745b4d33b432a1b723c7cd47d77_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"同步机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步机制"}},[t._v("#")]),t._v(" 同步机制")]),t._v(" "),s("h4",{attrs:{id:"cap理论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cap理论"}},[t._v("#")]),t._v(" CAP理论")]),t._v(" "),s("p",[t._v("C:一致性")]),t._v(" "),s("p",[t._v("A:可用性")]),t._v(" "),s("p",[t._v("P：分区容错性")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-fc403028db49a8f415c33870c6950f4f_720w.jpg?source=1940ef5c",alt:"img"}})]),t._v(" "),s("h4",{attrs:{id:"redis采用异步复制-保持数据最终一致性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis采用异步复制-保持数据最终一致性"}},[t._v("#")]),t._v(" Redis采用异步复制，保持数据最终一致性；")]),t._v(" "),s("blockquote",[s("p",[t._v("假如：Redis集群分布为一主四从，如果都从主节点复制到所有从节点，浪费耗时；为了释放主节点压力，采用从从复制策略")])]),t._v(" "),s("h3",{attrs:{id:"缓存击穿、缓存穿透、缓存雪崩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿、缓存穿透、缓存雪崩"}},[t._v("#")]),t._v(" 缓存击穿、缓存穿透、缓存雪崩")]),t._v(" "),s("p",[t._v("缓存击穿：缓存失效，并发请求过来，数据还没缓存完，可能造成DB宕机")]),t._v(" "),s("p",[t._v("缓存穿透：没有这个key，使用克隆器")]),t._v(" "),s("p",[t._v("缓存雪崩：一瞬间缓存都失效了。")]),t._v(" "),s("p",[t._v("​\t设置随机的失效时间")]),t._v(" "),s("p",[t._v("​\t缓存永远不失效")]),t._v(" "),s("h2",{attrs:{id:"mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[t._v("#")]),t._v(" MySql")]),t._v(" "),s("blockquote",[s("p",[t._v("海豚：Sakila")])]),t._v(" "),s("h3",{attrs:{id:"sql执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql执行"}},[t._v("#")]),t._v(" sql执行")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("建立连接")])]),t._v(" "),s("p",[t._v("通讯机制")]),t._v(" "),s("ol",[s("li",[t._v("全双工：能同时发送和接收数据")]),t._v(" "),s("li",[t._v("半双工：某一时刻要么发送数据，要么接收数据")]),t._v(" "),s("li",[t._v("单工：只能发送数据或只能接收数据")])]),t._v(" "),s("p",[t._v("线程状态，show processlist；查看用户正在运行的线程信息；")]),t._v(" "),s("ol",[s("li",[t._v("id：线程id，可以使用kill xx")]),t._v(" "),s("li",[t._v("user：启动这个线程的用户")]),t._v(" "),s("li",[t._v("host：发送请求客户端的ip和端口")]),t._v(" "),s("li",[t._v("db：当前命令执行的数据库")]),t._v(" "),s("li",[t._v("command：该线程正在执行的操作命令\n"),s("ol",[s("li",[t._v("create DB")]),t._v(" "),s("li",[t._v("Drop DB")]),t._v(" "),s("li",[t._v("Execute：正在执行一个PreparedStatement")]),t._v(" "),s("li",[t._v("Close Stmt：关闭一个PreparedStatement")]),t._v(" "),s("li",[t._v("Query：执行一个语句")]),t._v(" "),s("li",[t._v("Sleep：正在等待客户端发送语句")]),t._v(" "),s("li",[t._v("Quit：正在退出")]),t._v(" "),s("li",[t._v("ShutDown：正在关闭服务器")])])]),t._v(" "),s("li",[t._v("time：表示处于当前状态的时间，单位是秒")]),t._v(" "),s("li",[t._v("state：线程状态")]),t._v(" "),s("li",[t._v("info：一般记录线程执行的语句，show full processlist查看完整的sql")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("查询缓存")])]),t._v(" "),s("p",[t._v("会缓存查询的sql语句和查询结果")]),t._v(" "),s("p",[t._v("缓存的sql语句是含参数的，必须完全相同才可以查询到")]),t._v(" "),s("p",[t._v("即时设置开启查询缓存：以下sql也不能保存")]),t._v(" "),s("ul",[s("li",[t._v("sql中包含sql_no_cache的")]),t._v(" "),s("li",[t._v("查询结果大于query_cache_limit的：SELECT @@query_cache_limit/1024/1024;")]),t._v(" "),s("li",[t._v("查询中有一些不确定的参数，比如函数now()")])]),t._v(" "),s("p",[t._v("查询缓存是否启用：SHOW VARIABLES LIKE '%query_cache%';")]),t._v(" "),s("p",[t._v("查询缓存详细的配置：show status like 'Qcache%';\t// 查看详细的缓存参数，可用缓存空间，缓存快，缓存多少等。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("解析和优化")])]),t._v(" "),s("p",[t._v("两类：编译时优化，执行时优化")]),t._v(" "),s("p",[t._v("等价变换策略：")]),t._v(" "),s("p",[t._v("​\twhere 1=1 and a=b\t\t\t\twhere a=b")]),t._v(" "),s("p",[t._v("​\ta<b and a=5\t\t\t\t\t\t\t5<b and a=5")]),t._v(" "),s("p",[t._v("​\t基于联合索引，调整条件位置")]),t._v(" "),s("p",[t._v("对max、min、count函数的优化")]),t._v(" "),s("p",[t._v("​\tinnoDB\tmax：找最右边的")]),t._v(" "),s("p",[t._v("​\tinnoDB\tmin：找最左边的")]),t._v(" "),s("p",[t._v("​\tMyISAM\tcount：不许返回，直接返回结果")]),t._v(" "),s("p",[t._v("提前终止查询")]),t._v(" "),s("p",[t._v("​\tlimit 1，就不会再继续遍历了")]),t._v(" "),s("p",[t._v("in查询优化")]),t._v(" "),s("p",[t._v("​\t例如 where id in (2, 4, 1, 5)，先会进行排序where id in (1, 2, 4, 5)，再通过二分法查找是否在in中")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("执行引擎")])]),t._v(" "),s("p",[t._v("通过API接口跟存储引擎交互；")]),t._v(" "),s("p",[t._v("先查询缓存，有的存到缓存中；返回数据过多，采用增量模式返回。")])])]),t._v(" "),s("h3",{attrs:{id:"innodb与myisam对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#innodb与myisam对比"}},[t._v("#")]),t._v(" InnoDB与MyISAM对比")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("InnoDB支持事务和外键\nInnoDB支持行锁、表锁；MyISAM支持表锁\nInnoDB是聚簇索引结构；MyISAM是非聚簇索引结构\nInnoDB通过MVCC支持并发处理\n存储文件格式不同：InnoDB frm表结构文件、ibd表数据文件、ibdata1  MyISAM frm、MYD表数据、MYI索引文件\n")])])]),s("h3",{attrs:{id:"innodb内存结构、磁盘结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#innodb内存结构、磁盘结构"}},[t._v("#")]),t._v(" InnoDB内存结构、磁盘结构")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2ltYWdlcy9pbm5vZGItYXJjaGl0ZWN0dXJlLnBuZw?x-oss-process=image/format,png",alt:"img"}})]),t._v(" "),s("p",[t._v("Buffer Pool")]),t._v(" "),s("p",[t._v("Change Pool")]),t._v(" "),s("p",[t._v("Log Buffer\t\tredo log、undo")]),t._v(" "),s("p",[t._v("Tablespace")]),t._v(" "),s("p",[t._v("​\t系统表空间")]),t._v(" "),s("h3",{attrs:{id:"innodb的后台线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#innodb的后台线程"}},[t._v("#")]),t._v(" InnoDB的后台线程")]),t._v(" "),s("p",[t._v("IO线程")]),t._v(" "),s("p",[t._v("··线程")]),t._v(" "),s("p",[t._v("RollBack线程")]),t._v(" "),s("p",[t._v("Master线程")]),t._v(" "),s("h3",{attrs:{id:"innodb的存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#innodb的存储结构"}},[t._v("#")]),t._v(" InnoDB的存储结构")]),t._v(" "),s("h4",{attrs:{id:"数据存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据存储结构"}},[t._v("#")]),t._v(" 数据存储结构")]),t._v(" "),s("p",[t._v("TableSpace => 段\t=>\t区\t=>\t页\t=>\t行")]),t._v(" "),s("p",[t._v("TableSpace：初始化两个区，①结构区、②数据和索引区；每创建一个索引就会创建两个区")]),t._v(" "),s("p",[t._v("区：一个区多个页，空间不够的时候重新分配一个区而不是一个页；有好几种页")]),t._v(" "),s("p",[t._v("页：页头、页尾、多个行")]),t._v(" "),s("p",[t._v("行：存具体的数据，事务id、回滚的记录")]),t._v(" "),s("h3",{attrs:{id:"mysql性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql性能优化"}},[t._v("#")]),t._v(" MySql性能优化")]),t._v(" "),s("p",[t._v("硬件升级、系统配置、表结构设计、sql语句及索引")]),t._v(" "),s("h4",{attrs:{id:"系统配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统配置"}},[t._v("#")]),t._v(" 系统配置")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("尽量在缓存中获取数据")]),t._v(" "),s("p",[t._v("SHOW GLOBAL status like 'innodb_buffer_pool_pages%';")])]),t._v(" "),s("li",[s("p",[t._v("数据预热")])]),t._v(" "),s("li",[s("p",[t._v("降低磁盘写入次数")]),t._v(" "),s("p",[t._v("加大redo_log，减少了磁盘次数")])]),t._v(" "),s("li",[s("p",[t._v("通用查询日志，慢查询日志可以不开，bin-log必须要开")])]),t._v(" "),s("li",[s("p",[t._v("TODO")])])]),t._v(" "),s("h2",{attrs:{id:"i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#i-o"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://snailclimb.gitee.io/javaguide/#/docs/java/basis/IO%E6%A8%A1%E5%9E%8B?id=io",target:"_blank",rel:"noopener noreferrer"}},[t._v("I/O"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("I/O（"),s("strong",[t._v("I")]),t._v("nput/"),s("strong",[t._v("O")]),t._v("utpu） 即"),s("strong",[t._v("输入／输出")]),t._v(" 。")]),t._v(" "),s("p",[s("strong",[t._v("我们先从计算机结构的角度来解读一下 I/O。")])]),t._v(" "),s("p",[t._v("根据冯.诺依曼结构，计算机结构分为 5 大部分：运算器、控制器、存储器、输入设备、输出设备。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190624122126398.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcy1jbG91ZC5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70",alt:"冯诺依曼体系结构"}})]),t._v(" "),s("h3",{attrs:{id:"有哪些常见的-io-模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常见的-io-模型"}},[t._v("#")]),t._v(" 有哪些常见的 IO 模型?")]),t._v(" "),s("p",[t._v("UNIX 系统下， IO 模型一共有 5 种： "),s("strong",[t._v("同步阻塞 I/O")]),t._v("、"),s("strong",[t._v("同步非阻塞 I/O")]),t._v("、"),s("strong",[t._v("I/O 多路复用")]),t._v("、"),s("strong",[t._v("信号驱动 I/O")]),t._v(" 和"),s("strong",[t._v("异步 I/O")]),t._v("。")]),t._v(" "),s("p",[t._v("这也是我们经常提到的 5 种 IO 模型。")]),t._v(" "),s("h3",{attrs:{id:"java中常见的io模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java中常见的io模型"}},[t._v("#")]),t._v(" Java中常见的IO模型")]),t._v(" "),s("h4",{attrs:{id:"bio-blocking-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bio-blocking-i-o"}},[t._v("#")]),t._v(" BIO（Blocking I/O）")]),t._v(" "),s("p",[s("strong",[t._v("BIO 属于同步阻塞 IO 模型")]),t._v(" 。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a9e704af49b4380bb686f0c96d33b81~tplv-k3u1fbpfcp-watermark.image",alt:"图源：《深入拆解Tomcat & Jetty》"}})]),t._v(" "),s("h4",{attrs:{id:"nio-no-blocking-new-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nio-no-blocking-new-i-o"}},[t._v("#")]),t._v(" NIO（No-Blocking/New I/O）")]),t._v(" "),s("p",[t._v("Java 中的 NIO 可以看作是 "),s("strong",[t._v("I/O 多路复用模型")]),t._v("。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb174e22dbe04bb79fe3fc126aed0c61~tplv-k3u1fbpfcp-watermark.image",alt:"图源：《深入拆解Tomcat & Jetty》"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88ff862764024c3b8567367df11df6ab~tplv-k3u1fbpfcp-watermark.image",alt:"img"}})]),t._v(" "),s("h4",{attrs:{id:"aio-asynchronous-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aio-asynchronous-i-o"}},[t._v("#")]),t._v(" AIO (Asynchronous I/O)")]),t._v(" "),s("p",[t._v("AIO 也就是 NIO 2。Java 7 中引入了 NIO 的改进版 NIO 2,它是异步 IO 模型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3077e72a1af049559e81d18205b56fd7~tplv-k3u1fbpfcp-watermark.image",alt:"img"}})]),t._v(" "),s("p",[s("strong",[t._v("总结：BIO、NIO、AIO")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images.xiaozhuanlan.com/photo/2020/33b193457c928ae02217480f994814b6.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1627626380694.png",alt:"设计模式"}})]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"工厂方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法"}},[t._v("#")]),t._v(" 工厂方法")]),t._v(" "),s("p",[s("strong",[t._v("工厂方法模式")]),t._v("是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/factory-method/structure.png",alt:"工厂方法模式结构"}})]),t._v(" "),s("h3",{attrs:{id:"抽象工厂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂"}},[t._v("#")]),t._v(" 抽象工厂")]),t._v(" "),s("p",[s("strong",[t._v("抽象工厂模式")]),t._v("是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/abstract-factory/problem-zh.png",alt:"生成不同风格的系列家具。"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/abstract-factory/solution2.png",alt:"工厂类的层次结构"}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("接口升级时，有多个接口，将version存入yml中，通过同一个抽象工厂，不同环境生产出不同的Service\n")])])]),s("h3",{attrs:{id:"生成器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[t._v("#")]),t._v(" 生成器")]),t._v(" "),s("p",[s("strong",[t._v("生成器模式")]),t._v("是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/builder/example-zh.png",alt:"生成器模式结构示例"}})]),t._v(" "),s("h3",{attrs:{id:"原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),s("p",[s("strong",[t._v("原型模式")]),t._v("是一种创建型设计模式， 使你能够复制已有对象， 而又无需使代码依赖它们所属的类。")]),t._v(" "),s("h4",{attrs:{id:"基本实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本实现"}},[t._v("#")]),t._v(" 基本实现")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/prototype/structure.png",alt:"原型设计模式的结构"}})]),t._v(" "),s("h4",{attrs:{id:"原型注册表实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型注册表实现"}},[t._v("#")]),t._v(" 原型注册表实现")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/prototype/structure-prototype-cache.png",alt:"原型注册表"}})]),t._v(" "),s("h3",{attrs:{id:"单例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例"}},[t._v("#")]),t._v(" 单例")]),t._v(" "),s("p",[s("strong",[t._v("单例模式")]),t._v("是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。")]),t._v(" "),s("p",[s("img",{attrs:{src:"C:/Users/sun/AppData/Roaming/Typora/typora-user-images/image-20210730164556284.png",alt:"image-20210730164556284"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/singleton/structure-zh.png",alt:"单例模式结构"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1627635587453.png",alt:"多线程单例实现"}})]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"适配器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适配器"}},[t._v("#")]),t._v(" 适配器")]),t._v(" "),s("p",[s("strong",[t._v("适配器模式")]),t._v("是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/adapter/structure-object-adapter.png",alt:"适配器设计模式的结构（对象适配器）"}})]),t._v(" "),s("p",[t._v("java中Arrays.asList(E[] e)：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1627891136303.png",alt:"main"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1627891208603.png",alt:"数组=>集合的适配器"}})]),t._v(" "),s("h3",{attrs:{id:"桥接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桥接"}},[t._v("#")]),t._v(" 桥接")]),t._v(" "),s("p",[s("strong",[t._v("桥接模式")]),t._v("是一种结构型设计模式， 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/content/bridge/bridge.png",alt:"桥接设计模式"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/bridge/example-zh.png",alt:"桥接模式示例的结构"}})]),t._v(" "),s("h3",{attrs:{id:"组合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组合"}},[t._v("#")]),t._v(" 组合")]),t._v(" "),s("p",[s("strong",[t._v("组合模式")]),t._v("是一种结构型设计模式， 你可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/composite/live-example.png",alt:"部队结构的例子"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/composite/structure-zh.png",alt:"组合设计模式的结构"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"C:/Users/sun/AppData/Roaming/Typora/typora-user-images/image-20210802163246345.png",alt:"image-20210802163246345"}})]),t._v(" "),s("h3",{attrs:{id:"装饰"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装饰"}},[t._v("#")]),t._v(" 装饰")]),t._v(" "),s("p",[s("strong",[t._v("装饰模式")]),t._v("是一种结构型设计模式， 允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/decorator/solution2-zh.png",alt:"装饰模式解决方案"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/decorator/structure.png",alt:"装饰设计模式的结构"}})]),t._v(" "),s("blockquote",[s("p",[t._v("https://blog.csdn.net/hqing159/article/details/76827873")])]),t._v(" "),s("h3",{attrs:{id:"外观"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外观"}},[t._v("#")]),t._v(" 外观")]),t._v(" "),s("p",[t._v("例如，生成二维码，需要很多工具类、import很多类、可以将这些封装成一个类的工具方法，调用者完全不知道你做了啥，你只是给他看了他想看的东西。PS：其实里面乱七八糟的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/facade/structure.png",alt:"外观设计模式的结构"}})]),t._v(" "),s("h3",{attrs:{id:"享元"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#享元"}},[t._v("#")]),t._v(" 享元")]),t._v(" "),s("h3",{attrs:{id:"代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"责任链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#责任链"}},[t._v("#")]),t._v(" 责任链")]),t._v(" "),s("h3",{attrs:{id:"命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[t._v("#")]),t._v(" 命令")]),t._v(" "),s("h3",{attrs:{id:"迭代器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),s("h3",{attrs:{id:"中介者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中介者"}},[t._v("#")]),t._v(" 中介者")]),t._v(" "),s("h3",{attrs:{id:"备忘录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#备忘录"}},[t._v("#")]),t._v(" 备忘录")]),t._v(" "),s("h3",{attrs:{id:"观察者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#观察者"}},[t._v("#")]),t._v(" 观察者")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("场景：订单有3种状态 1 2 3\n状态1：发邮件、打印日志、发微信\n状态2：发邮件\n状态3：打印日志\n\n维护一个基础的发布者Map<状态，List<Listener>>，不同的状态塞不同的观察者，具体的观察者执行自己具体的update()逻辑\n")])])]),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/observer/example.png",alt:"观察者模式示例的结构"}})]),t._v(" "),s("p",[t._v("Spring : 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。\nspring中Observer模式常用的地方是listener的实现。如ApplicationListener。")]),t._v(" "),s("h3",{attrs:{id:"状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态"}},[t._v("#")]),t._v(" 状态")]),t._v(" "),s("h3",{attrs:{id:"策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#策略"}},[t._v("#")]),t._v(" 策略")]),t._v(" "),s("p",[t._v("实现一种策略，应用：可以简化代码繁多的if else")]),t._v(" "),s("h3",{attrs:{id:"模板方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板方法"}},[t._v("#")]),t._v(" 模板方法")]),t._v(" "),s("p",[t._v("顶级接口确定了某些方法的逻辑，已经定义了骨架，你可以继承实现某些特定的功能；")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://refactoringguru.cn/images/patterns/diagrams/template-method/structure.png",alt:"模板方法设计模式的结构"}})]),t._v(" "),s("h2",{attrs:{id:"多线程并发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程并发"}},[t._v("#")]),t._v(" 多线程并发")]),t._v(" "),s("h3",{attrs:{id:"线程创建方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程创建方式"}},[t._v("#")]),t._v(" 线程创建方式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.new Thread().start()：通过本地方法native start0()执行；\n2.实现Runnable接口：由于Thread需要继承，如果已经继承了其他类，就无法使用，此时可采用实现Runnable接口的形式；\n3.实现Callable接口：执行Callable任务后，可以获得一个Future对象，搭配ExecutorService线程池接口使用；\n4.线程池创建线程：线程和数据库连接都是非常宝贵的资源，如果每次都在需要的时候创建，不需要的时候销毁，是十分浪费的，此时可以使用线程池让线程缓存。\n")])])]),s("h3",{attrs:{id:"线程池-newworkstealingpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池-newworkstealingpool"}},[t._v("#")]),t._v(" 线程池(newWorkStealingPool)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/TheSunnn/note-cloud/raw/master/1626663270051.png",alt:"创建线程池的5种方式"}})]),t._v(" "),s("blockquote",[s("p",[t._v("无论哪种创建方式，归根结底都是new ThreadPoolExecutor()/new ForkJoinPool()，顶级接口都是ExecutorService")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ThreadPoolExecutor(\n\tint corePoolSize,\t// 即使是空闲状态，线程池也要保持的线程数\n\tint maximumPoolSize,\t// 线程池中允许的最大线程数\n\tlong keepAliveTime,\t// maximumPoolSize - corePoolSize = x；x这类线程空闲的时间达到设置的阈值，将关闭此类线程\n\tTimeUnit unit,\t// keepAliveTime的单位\n\tBlockingQueue<Runnable> workQueue,\t// 等待线程池执行的任务队列\n\tThreadFactory threadFactory)\t// 执行器创建新线程时，使用到的工厂\n")])])]),s("ul",[s("li",[t._v("线程池工作流程\n"),s("ul",[s("li",[t._v("当一个线程进入后，我们不会马上执行他，先判断线程池中的线程数是否>核心线程数\n"),s("ul",[s("li",[t._v("小于：【执行】")]),t._v(" "),s("li",[t._v("大于：放入队列\n"),s("ul",[s("li",[t._v("放入队列成功，等待")]),t._v(" "),s("li",[t._v("队列满，判断是否大于线程池中最大线程数\n"),s("ul",[s("li",[t._v("大于：异常RejectExecutionException")]),t._v(" "),s("li",[t._v("小于则创建非核心线程【执行】")])])])])])])]),t._v(" "),s("li",[t._v("如果一段时间后依旧没有线程调用线程池，如果此时存在非核心线程，则销毁")])])])]),t._v(" "),s("h3",{attrs:{id:"线程生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程生命周期"}},[t._v("#")]),t._v(" 线程生命周期")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("New：新建\nRunnable：就绪\nRunning：运行\nBlocked：阻塞\nDead：死亡\n")])])]),s("p",[s("img",{attrs:{src:"https://gitee.com/TheSunnn/note-cloud/raw/master/1626679780420.png",alt:"线程声明周期"}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("阻塞的几种情况：\n1.等待阻塞await()：运行的线程触发了object.await()方法，JVM会把线程放入等待队列；\n2.锁池lock()：运行的线程获取同步锁时，如果该同步锁被别的线程占用，那么JVM会将该线程放入锁池(lock pool)中；\n3.sleep() join()：线程触发休眠、以及线程将别的线程加入时都会造成线程阻塞。\n")])])]),s("h3",{attrs:{id:"终止线程的4种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#终止线程的4种方式"}},[t._v("#")]),t._v(" 终止线程的4种方式")]),t._v(" "),s("div",{staticClass:"language-lsl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.正常运行结束\n2.interrupt()\n3.stop\n4.设置退出标志：while(flag) {}\n")])])]),s("p",[s("img",{attrs:{src:"https://gitee.com/TheSunnn/note-cloud/raw/master/1626680028499.png",alt:"终止线程：interrupt"}})]),t._v(" "),s("h3",{attrs:{id:"阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列"}},[t._v("#")]),t._v(" 阻塞队列")]),t._v(" "),s("p",[t._v("有几种不同类型的阻塞队列，常用的是基于数组的ArrayBlockQueue和基于链表的LinkedBlockQueue")]),t._v(" "),s("blockquote",[s("p",[t._v("手写的ArrayBlockQueue，采用ReentrantLock Condition")]),t._v(" "),s("blockquote",[s("p",[t._v("Condition：假设线程中对接空了，需要唤醒生产者生产消息，如果使用传统的notifyAll()也会唤醒消费者，而Condition可以更加细粒度的控制线程的休眠与唤醒。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1626681235851.png",alt:"手写ArrayBlockQueue代码"}})]),t._v(" "),s("ol",[s("li",[t._v("ArrayBlockingQueue：数组、有界")]),t._v(" "),s("li",[t._v("LinkedBlockingQueue：链表、有界")]),t._v(" "),s("li",[t._v("PriorityBlockingQueue：支持优先级排序、无界")]),t._v(" "),s("li",[t._v("DelayQueue：优先级队列实现的无界阻塞队列")]),t._v(" "),s("li",[t._v("SynchronousQueue：不存储元素的阻塞队列")]),t._v(" "),s("li",[t._v("LinkedTransferQueue：链表、无界")]),t._v(" "),s("li",[t._v("LinkedBlockingDeque：链表、双向阻塞队列\n"),s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1626682017059.png",alt:"阻塞队列家族"}})])]),t._v(" "),s("h3",{attrs:{id:"synchronized同步锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized同步锁"}},[t._v("#")]),t._v(" Synchronized同步锁")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1626686073557.png",alt:"synchronized"}})]),t._v(" "),s("ol",[s("li",[t._v("JVM每次会从竞争者队列（ContentionList）的尾部选出一个竞争候选者（OnDeck），但是在并发情况下，这么做会导致大量线程进行CAS访问，为了减少队列尾部的压力，JVM会将一部分竞争者放入EntryList作为候选竞争线程；")]),t._v(" "),s("li",[t._v("Owner线程执行unlock时，会将ContentionList一部分转移至EntryList中，并从中选出一个OnDeck；")]),t._v(" "),s("li",[t._v("但是Owner并不是直接将锁交给OnDeck，而是通过竞争的方式，让OnDeck、EntryList共同竞争锁；“竞争切换”；")]),t._v(" "),s("li",[t._v("如果Owner线程被Wait()阻塞，则转移至WaitSet队列中，某个时刻通过notify、notifyAll唤醒，重新进入EntryList。")]),t._v(" "),s("li",[t._v("Synchronized是非公平锁：Synchronized在线程进入ContentionList时，会尝试自旋，如果获取到就会直接拿到锁，这样对已经进入ContentionList的线程时不公平的。")]),t._v(" "),s("li",[t._v("每个对象都有monitor，加锁就是在竞争monitor对象；Synchronized锁代码块：通过monitorenter和monitorexit指令来实现的；锁方法是通过标记为来判断的。")]),t._v(" "),s("li",[t._v("Synchronized是重量级锁，各个jdk版本都持续的进行优化，目前为止Synchronized拥有：适应自旋、锁消除、锁粗话、偏向锁、轻量级锁、重量级锁；")]),t._v(" "),s("li",[t._v("锁可以同偏向锁 => 轻量级锁 => 重量级锁；锁膨胀。")])]),t._v(" "),s("h3",{attrs:{id:"reentrantlock、读写锁、读写锁降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock、读写锁、读写锁降级"}},[t._v("#")]),t._v(" ReentrantLock、读写锁、读写锁降级")]),t._v(" "),s("ol",[s("li",[t._v("ReentrantLock实现Lock接口，可响应中断、可重入锁")]),t._v(" "),s("li",[t._v("主要方法：\n"),s("ol",[s("li",[t._v("lock()")]),t._v(" "),s("li",[t._v("unLock()")]),t._v(" "),s("li",[t._v("tryLock()")]),t._v(" "),s("li",[t._v("lockInterruptibly()：如果当前线程并未中断，可获取锁；PS：如果两个线程分别调用lock()、lockInterruptibly()，此时中断这两个线程，lock()不会异常，lockInterruptibly()会异常。")]),t._v(" "),s("li",[t._v("isLock()")]),t._v(" "),s("li",[t._v("newConditon()：条件组件")])])]),t._v(" "),s("li",[t._v("几个lock()方法的区别")]),t._v(" "),s("li",[t._v("公平锁、非公平锁")]),t._v(" "),s("li",[t._v("Condition\n"),s("ol",[s("li",[t._v("awiat()方法与Object.wait()方法等效")]),t._v(" "),s("li",[t._v("signal()方法与Object.notify()方法等效")]),t._v(" "),s("li",[t._v("signalAll()方法与Object.notifyAll()方法等效")]),t._v(" "),s("li",[t._v("ReentrantLock可以唤醒执行线程，而Synchronized唤醒所有等待的线程")])])]),t._v(" "),s("li",[t._v("ReentrantLock与Synchronized的区别和联系\n"),s("ol",[s("li",[t._v("两者都是可重入锁，不过ReentrantLock的加锁与释放锁是通过Java API由编程人员控制，Synchronized是Java虚拟机通过monitorenter、monitorexit指令内部控制；")]),t._v(" "),s("li",[t._v("ReentrantLock是可中断锁、手动设置是否公平锁、多个锁；")]),t._v(" "),s("li",[t._v("Synchronized采用同步阻塞，是悲观并发策略；ReentrantLock采用同步非阻塞，是乐观并发策略。")])])])]),t._v(" "),s("h3",{attrs:{id:"condition-awiat-singal-singalall、object-wait-notify-notifyall"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#condition-awiat-singal-singalall、object-wait-notify-notifyall"}},[t._v("#")]),t._v(" Condition awiat singal singalAll、Object wait notify notifyAll")]),t._v(" "),s("blockquote",[s("p",[t._v("上面说过的，等效")])]),t._v(" "),s("h3",{attrs:{id:"countdownlatch、cyclicbarrier、phaser、semaphore"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch、cyclicbarrier、phaser、semaphore"}},[t._v("#")]),t._v(" CountDownLatch、Cyclicbarrier、Phaser、Semaphore")]),t._v(" "),s("ol",[s("li",[t._v("CountDownLatch：计时器")]),t._v(" "),s("li",[t._v("Cyclicbarrier：栅栏")]),t._v(" "),s("li",[t._v("Phaser：1 2的结合体、多阶段，每个阶段可以自定义逻辑、可动态增加删除节点")]),t._v(" "),s("li",[t._v("Semaphore：信号量，虽然可以实现线程技术器的功能，但更可以做类似ReentrantLock的事情，设定信号量为1，那就代表所有线程都需要获取信号量后才能操作，操作完成释放信号量，下一个线程继续获取。形如锁，常用作流量控制")])]),t._v(" "),s("h3",{attrs:{id:"volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[t._v("#")]),t._v(" volatile")]),t._v(" "),s("ul",[s("li",[t._v("全局可见：volatile修饰的关键字，在变化后的新值对其他线程来说是立即可见的，并且一致的；但是由于i++等运算操作符不是原子的，可能会造成正在运算时其他线程已经修改了volatile变量的值；\n"),s("ul",[s("li",[t._v("内存语义：执行volatile变量写操作时，会执行lock指令，执行一次store和write操作，该指令只做了两件事，①将线程内存刷新至主内存；②将其他线程内存设置为无效。")])])]),t._v(" "),s("li",[t._v("禁止指令重排序：java在编译时会将指令重新排序，提高性能，但是volatile修饰的变量不能重排序，主要体现在以下几个方面；\n"),s("ul",[s("li",[t._v("第一个操作-读：禁止将第二个操作重排序到读之前，确保读到的数据是没有被修改过的；")]),t._v(" "),s("li",[t._v("第一个操作-写：第二个操作-读禁止重排序；")]),t._v(" "),s("li",[t._v("第二个操作-写：不管第一个操作是什么都不能重排序，确保写之前的操作不会重排序到写之后；")])])])]),t._v(" "),s("h3",{attrs:{id:"atomicinteger、longadder、atomicstampedreference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#atomicinteger、longadder、atomicstampedreference"}},[t._v("#")]),t._v(" AtomicInteger、LongAdder、AtomicStampedReference")]),t._v(" "),s("blockquote",[s("p",[t._v("原子性操作CAS，但存在ABA问题，而AtomicStampedReference采用增加版本号/时间戳解决此问题")])]),t._v(" "),s("h3",{attrs:{id:"乐观锁、悲观锁、自旋锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁、悲观锁、自旋锁"}},[t._v("#")]),t._v(" 乐观锁、悲观锁、自旋锁")]),t._v(" "),s("ul",[s("li",[t._v("乐观锁：很乐观的认为读多写少，读的时候不上锁，写的时候去查一下数据是否修改过，如果没有修改过直接修改、如果数据被修改，重新读写，java中常用的思想就是CAS；")]),t._v(" "),s("li",[t._v("悲观锁：悲观的认为读少写多，每次读的时候怕被修改直接锁住，Synchronized就是典型的悲观锁；AQS中会使用乐观锁尝试获取锁，获取不到再转换为悲观锁，入ReentrantLock；")]),t._v(" "),s("li",[t._v("自旋锁：一个新线程进来，阻塞，唤醒竞争锁，成功执行；线程的阻塞和唤醒十分耗费性能（线程的阻塞需要从用户态 => 内核态），在线程执行时间短且频繁切换线程的场景下，可使用自旋锁；原理是线程先尝试获取锁，获取不到while(true) for(;😉（理解粗糙，哈哈哈哈哈）自旋一下，再重新尝试获取，这样牺牲了CPU但是节省了内核的消耗\n"),s("ul",[s("li",[t._v("优点：减少用户态 => 内核态的消耗")]),t._v(" "),s("li",[t._v("缺点：浪费CPU")]),t._v(" "),s("li",[t._v("自旋的时间：JDK1.5固定配置自旋锁的时间、JDK1.6引入适应自旋锁、JDK1.7后交由JVM自己控制")]),t._v(" "),s("li",[t._v("适应自旋锁：意味着每次自旋的时间不再是固定的死值，而是变化的，一般遵循几个方面\n"),s("ul",[s("li",[t._v("根据上一个相同对象锁的自旋时间和锁拥有者的状态来确定，一般是系统一次上下文切换的时间")]),t._v(" "),s("li",[t._v("平均负载小于CPUs则一直自旋，如果有超过CPUs/2个线程正在自旋则阻塞；")]),t._v(" "),s("li",[t._v("如果自旋时发现Owner发生变化则延迟自旋(自旋计数)或阻塞")]),t._v(" "),s("li",[t._v("如果CPU处于节电模式则停止自旋")]),t._v(" "),s("li",[t._v("自旋时间的最坏时间是CPU的存储延迟（CPU A存储的数据，CPU B得知A存储了数据的时间差）")]),t._v(" "),s("li",[t._v("自旋会适当放弃线程优先级之间的差异")])])])])])]),t._v(" "),s("h3",{attrs:{id:"可重入锁-广义上"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可重入锁-广义上"}},[t._v("#")]),t._v(" 可重入锁（广义上）")]),t._v(" "),s("p",[t._v("并不是单纯的指ReentrantLock，是一种广义上的可重复锁，当一个线程获取到锁后，他的内部函数还可以获取该锁的其他代码，不受影响，java中常用的可重入锁为ReentrantLock、Synchronized")]),t._v(" "),s("h3",{attrs:{id:"公平锁、非公平锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公平锁、非公平锁"}},[t._v("#")]),t._v(" 公平锁、非公平锁")]),t._v(" "),s("p",[t._v("公平锁：需要维护一个锁队列，先进入队列中的线程可以优先获取锁；\n非公平锁：直接尝试获取锁，获取不到去队尾等待")]),t._v(" "),s("ol",[s("li",[t._v("非公平锁性能比公平锁高5~ 10倍，因为公平锁需要在多核的情况下维护一个队列；")]),t._v(" "),s("li",[t._v("Java中Synchronized是非公平锁，ReentrantLock通过lock()设置是否公平，isPair();")])]),t._v(" "),s("h3",{attrs:{id:"共享锁、独占锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享锁、独占锁"}},[t._v("#")]),t._v(" 共享锁、独占锁")]),t._v(" "),s("ul",[s("li",[t._v("独占锁：完全霸占整个锁，是一种悲观的加锁策略，他避免读/读冲突，如果一个读线程获取锁，其他读线程只能等待，JUC中的ReentrantLock就是如此；")]),t._v(" "),s("li",[t._v("共享锁：是一种读/读共享的乐观锁，JUC中的ReadWriteLock就是如此；")]),t._v(" "),s("li",[t._v("AQS中提供两个常量SHARED 和 EXCLUSIVE用来识别锁获取方式；")]),t._v(" "),s("li",[t._v("ReadWriteLock：读读共享、读写互斥、写写互斥；写锁中获取读锁出现锁降级。")])]),t._v(" "),s("h3",{attrs:{id:"无锁、偏向锁、轻量级锁、重量级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无锁、偏向锁、轻量级锁、重量级锁"}},[t._v("#")]),t._v(" 无锁、偏向锁、轻量级锁、重量级锁")]),t._v(" "),s("ul",[s("li",[t._v("偏向锁：为了适应多线程的场景，某些代码会加锁来解决，但通常情况下，这类代码并不会被多个线程同时竞争锁的情况，比如某个时间段只有一个线程请求，但是还有获取锁、释放锁这些额外的开销，所以偏向锁就此而生；\n"),s("ul",[s("li",[t._v("偏向锁只需要在置换ThreadID的时候执行一次CAS指令，而轻量级锁需要多个CAS原子指令")]),t._v(" "),s("li",[t._v("只有一个线程执行同步代码时才会使用偏向锁，进一步提高性能")]),t._v(" "),s("li",[t._v("如果存在>1个线程，则膨胀为轻量级锁")])])]),t._v(" "),s("li",[t._v("轻量级锁：\n"),s("ul",[s("li",[t._v("线程在执行代码块时，如果没有其他线程竞争，虚拟机会在当前线程生成一个栈帧，用于存储锁对象的Mark Word拷贝，虚拟机再通过CAS将Mark Word的指针指向锁记录（lock record），lock record指向锁对象的Mark Word；\n"),s("ul",[s("li",[t._v("CAS替换成功：持有锁、并执行锁内代码\n"),s("ul",[s("li",[t._v("释放锁monitor exit时，虚拟机执行CAS，如果锁对象的object mark word依旧指向lock record，并且拷贝的mark word与object mark word中的对象相同，则将拷贝对象替换回mark word\n"),s("ul",[s("li",[t._v("替换成功：结束")]),t._v(" "),s("li",[t._v("失败：释放锁，并唤醒挂起的线程")])])])])]),t._v(" "),s("li",[t._v("替换失败：挂起当前线程，等待被唤醒")])])]),t._v(" "),s("li",[t._v("轻量级锁用于两个线程交替执行同步代码快的情况，如果同一时间访问同一锁，将膨胀为重量级锁")]),t._v(" "),s("li",[s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1627546916140.png",alt:"img"}})]),t._v(" "),s("li",[t._v("重构：轻量级锁的加/释放锁过程\n"),s("ul",[s("li",[t._v("1.某个线程执行同步代码块时，检查当前线程状态是否为（线程标志位：01、偏向锁标志：0），如果是虚拟机会在当前线程的栈帧中创建一个锁记录区（Lock Record）；")]),t._v(" "),s("li",[t._v("2.首先执行CAS操作获取锁，\n"),s("ul",[s("li",[t._v("将object mark word拷贝到Lock Record中，我们叫他Displaced Mark Lock")]),t._v(" "),s("li",[t._v("将object mark word的指针指向Lock Record中，将Lock Record Owner的指针指向Object Mark Word\n"),s("ul",[s("li",[t._v("成功：获取到锁，执行同步代码")]),t._v(" "),s("li",[t._v("失败：首先检测mark word是否指向当前线程的栈帧：\n"),s("ul",[s("li",[t._v("是，说明已经获取到了锁，执行同步代码")]),t._v(" "),s("li",[t._v("否，存在多个线程竞争，升级为重量级锁，锁标志位：10，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面的线程阻塞，当前的线程尝试自旋来获取锁，自旋不到挂起阻塞")])])])])])])]),t._v(" "),s("li",[t._v("3.释放锁的目的就是为了将Dis Mark Word复制回object mark word中\n"),s("ul",[s("li",[t._v("首先检查object mark word是否依旧指向当前线程的栈帧中，并且object mark word与拷贝的Displaced Mark Word是否一致；\n"),s("ul",[s("li",[t._v("是：CAS")]),t._v(" "),s("li",[t._v("否：证明多个线程竞争，此时已经有别的线程获取了锁，已经膨胀为重量级锁，所以释放锁的同时，要唤醒这段时间阻塞的线程。")])])])])])])])])]),t._v(" "),s("li",[t._v("重量级锁：\n"),s("ul",[s("li",[t._v("Synchronized本质上是通过竞争monitor对象，又叫做对象监视器，而监视器锁本质上是依赖于底层的操作系统的Mutex Lock来实现的，而操作系统实现线程之间的切换需要从用户态切换到核心态，这个成本是非常高的，状态之间的切换需要相对比较长的时间，这也是Synchronized效率低的原因。")])])])]),t._v(" "),s("h3",{attrs:{id:"分段锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分段锁"}},[t._v("#")]),t._v(" 分段锁")]),t._v(" "),s("p",[t._v("分段锁是一种思想，将一个大锁拆分长多个小锁，常见的为ConcurrentHashMap")]),t._v(" "),s("h3",{attrs:{id:"锁优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁优化"}},[t._v("#")]),t._v(" 锁优化")]),t._v(" "),s("ul",[s("li",[t._v("减少锁持有时间")]),t._v(" "),s("li",[t._v("锁细粒度")]),t._v(" "),s("li",[t._v("锁分离")]),t._v(" "),s("li",[t._v("锁粗化")]),t._v(" "),s("li",[t._v("锁消除：编译级别，将绝对不可能发生竞争锁的代码消除锁；多数为编程人员不规范导致的")])]),t._v(" "),s("h3",{attrs:{id:"threadlocal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[t._v("#")]),t._v(" ThreadLocal")]),t._v(" "),s("p",[t._v("线程共享变量，每个线程都保存一个ThreadLocalMap对象，提供操作方法set、get、remove。")]),t._v(" "),s("h3",{attrs:{id:"concurrenthashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[t._v("#")]),t._v(" ConcurrentHashMap")]),t._v(" "),s("h3",{attrs:{id:"线程调度算法、进程调度算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程调度算法、进程调度算法"}},[t._v("#")]),t._v(" 线程调度算法、进程调度算法")]),t._v(" "),s("ul",[s("li",[t._v("线程调度算法：\n"),s("ul",[s("li",[t._v("抢占式：JVM采用此种方法")]),t._v(" "),s("li",[t._v("协调式")])])])]),t._v(" "),s("h3",{attrs:{id:"cas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas"}},[t._v("#")]),t._v(" CAS")]),t._v(" "),s("h3",{attrs:{id:"aqs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aqs"}},[t._v("#")]),t._v(" AQS")]),t._v(" "),s("h3",{attrs:{id:"jmm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jmm"}},[t._v("#")]),t._v(" JMM")]),t._v(" "),s("p",[t._v("是一种java内存模型，线程间的共享变量存在主内存，私有变量存在本地内存，操作私有变量时，先更新到本地内存，再更新到主内存，在并发的场景下可能出现1+1+1 = 2的情况，这也是多线程开发要解决的问题；\n​\t指令重排序：\n​\t\tas-if-serial：不管是什么重排序，单线程的程序执行结果不能变\n​\t\thappens-before：多线程情况下要求不能改变执行结果，但是对于不改变结果的重排序，JVM不做限制")]),t._v(" "),s("h3",{attrs:{id:"原子性、可见性、有序性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性、可见性、有序性"}},[t._v("#")]),t._v(" 原子性、可见性、有序性")]),t._v(" "),s("p",[t._v("原子性：基本的数据类型都具有原子性，long和double除外；\n可见性：一个线程修改了共享变量时，其他线程立即得知修改；\n有序性：禁止指令重排序")]),t._v(" "),s("h3",{attrs:{id:"final可以保证可见性吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final可以保证可见性吗"}},[t._v("#")]),t._v(" final可以保证可见性吗？")]),t._v(" "),s("p",[t._v("可见")]),t._v(" "),s("h3",{attrs:{id:"锁消除是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁消除是什么"}},[t._v("#")]),t._v(" 锁消除是什么？")]),t._v(" "),s("p",[t._v("锁消除指的是，编译器在对检测到不可能存在共享数据竞争的锁进行消除；")]),t._v(" "),s("h3",{attrs:{id:"锁粗化是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁粗化是什么"}},[t._v("#")]),t._v(" 锁粗化是什么？")]),t._v(" "),s("p",[t._v("原则是将同步块的作用范围尽量小，但是频繁的释放锁、获取锁，即使没有线程竞争也会很有损耗；")]),t._v(" "),s("h3",{attrs:{id:"什么是守护线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是守护线程"}},[t._v("#")]),t._v(" 什么是守护线程")]),t._v(" "),s("p",[t._v("setDaemon(true)，启动线程前设置，用于支持性工作。JVM中如果只剩下守护线程，那么都将立即终止。")]),t._v(" "),s("h3",{attrs:{id:"分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[t._v("#")]),t._v(" 分布式锁")]),t._v(" "),s("h4",{attrs:{id:"redis分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis分布式锁"}},[t._v("#")]),t._v(" Redis分布式锁")]),t._v(" "),s("h2",{attrs:{id:"talk-is-cheap-show-me-the-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#talk-is-cheap-show-me-the-code"}},[t._v("#")]),t._v(" Talk is cheap. Show me the code.")]),t._v(" "),s("h3",{attrs:{id:"java-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-8"}},[t._v("#")]),t._v(" Java 8")]),t._v(" "),s("blockquote",[s("p",[t._v("对行为参数化的理解")]),t._v(" "),s("p",[t._v("现在有一筐苹果；我想把所有的红色苹果挑出来，我想把所有大于100g的苹果挑出来，我或许还想把没红的和小于100g的苹果挑出来，我还可能把生虫子的挑出来。")]),t._v(" "),s("p",[t._v("如果是Java7：当然可以实现")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('for (Apple a : appleList) {\nif("红色".equals(a.getColor)){\n  newAppleList.add(a);\n}\n}\nfor (Apple a : appleList) {\n\tif(a.getWeight > 100g){\n\t\tnewAppleList.add(a);\n\t}\n}\nfor (Apple a : appleList) {\n\tif(a.getWeight > 100g && "红色".equals(a.getColor)){\n\t\tnewAppleList.add(a);\n\t}\n}\n')])])]),s("p",[t._v("那么问题来了，累不累...那我们开始做梦，如果变成下面这种形式 如何")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public List<Apple> find各种各样Apple(?我是参数?){\nList<Apple> newAppleList = Lists.newArrayList();\nfor (Apple a : appleList) {\n  if(？我是参数？){\n      newAppleList.add(a);\n  }\n}\nreturn newAppleList;\n}\n// 调用\nList<Apple> newAppleList = this.find各种各样Apple("红色".equals(a.getColor));\n')])])]),s("p",[t._v("我们用某一段代码 作为一个参数，来将一些共性很大的代码简化。")]),t._v(" "),s("p",[t._v("可 这又如何实现呢，难点又有哪些呢？")]),t._v(" "),s("p",[t._v("1.这个行为到底是干啥的，是判断是否Boolean，还是判断大小，还是返回一个字符串，还是返回其他的对象。如果不声明 返回值，编译器无法识别，也无法控制。")]),t._v(" "),s("p",[t._v("​\tboolean b = ？我是参数？;")]),t._v(" "),s("p",[t._v("​\tString s = ？我是参数？;")]),t._v(" "),s("p",[t._v("上面这个问题简单，匿名内部类 可以实现，虽然代码比较繁重。")]),t._v(" "),s("p",[t._v("如果 有一天，我有给了你一筐 梨，Apple和Li还是需要写两套方法。那如果我们在声明模板的时候 不需要定义参数的类型，请求的时候 我再声明 我是苹果还是梨。可否？")]),t._v(" "),s("p",[t._v("可")]),t._v(" "),s("p",[t._v("请求类型：Apple/Li a")]),t._v(" "),s("p",[t._v('我是参数："红色".equals(a.getColor);')]),t._v(" "),s("p",[t._v("返回类型：true/false;")]),t._v(" "),s("p",[t._v("所以 总结来看，我们需要知道 这个？我是参数？ -> 声明的类型、返回的类型")]),t._v(" "),s("p",[t._v("是/不是 = 我有一个苹果 -> 看一看这个苹果是否是红色")]),t._v(" "),s("p",[t._v("是/不是 = 我有一个苹果 -> 看一看这个苹果是否是绿色")]),t._v(" "),s("p",[t._v("是/不是 = 我有一个鸭梨 -> 看一看这个苹果是否是绿色")]),t._v(" "),s("p",[t._v("int 100g = 我有一个鸭梨 -> 看一看这个苹果是多重")]),t._v(" "),s("p",[t._v("String 红富士 = 我有一个苹果 -> 看一看这个苹果的品牌")])]),t._v(" "),s("h4",{attrs:{id:"常用函数式接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用函数式接口"}},[t._v("#")]),t._v(" 常用函数式接口")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("函数式接口")]),t._v(" "),s("th",[t._v("函数描述符")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Predicate<T>")]),t._v(" "),s("td",[t._v("T -> boolean")])]),t._v(" "),s("tr",[s("td",[t._v("Consumer<T>")]),t._v(" "),s("td",[t._v("T -> void")])]),t._v(" "),s("tr",[s("td",[t._v("Function<T,R>")]),t._v(" "),s("td",[t._v("T -> R")])]),t._v(" "),s("tr",[s("td",[t._v("Supplier<T>")]),t._v(" "),s("td",[t._v("( ) -> T")])]),t._v(" "),s("tr",[s("td",[t._v("UnaryOperator<T>")]),t._v(" "),s("td",[t._v("T -> T")])]),t._v(" "),s("tr",[s("td",[t._v("BinaryOperator<T>")]),t._v(" "),s("td",[t._v("( T, T ) -> T")])]),t._v(" "),s("tr",[s("td",[t._v("BiPredicate<L,R>")]),t._v(" "),s("td",[t._v("( L, R ) -> boolean")])]),t._v(" "),s("tr",[s("td",[t._v("BiConsumer<T,U>")]),t._v(" "),s("td",[t._v("( T, U ) -> void")])]),t._v(" "),s("tr",[s("td",[t._v("BiFunction<T,U,R>")]),t._v(" "),s("td",[t._v("( T, U ) -> R")])])])]),t._v(" "),s("h4",{attrs:{id:"常用lambda表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用lambda表达式"}},[t._v("#")]),t._v(" 常用Lambda表达式")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Lambda")]),t._v(" "),s("th",[t._v("等效的方法引用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("(Apple a) -> a.getWeight()")]),t._v(" "),s("td",[t._v("Apple::getWeight")])]),t._v(" "),s("tr",[s("td",[t._v("() -> Thread.currentThread().dumpStack()")]),t._v(" "),s("td",[t._v("Thread.currentThread()::dumpStack")])]),t._v(" "),s("tr",[s("td",[t._v("(str, i) -> str.substring(i)")]),t._v(" "),s("td",[t._v("String::substring")])]),t._v(" "),s("tr",[s("td",[t._v("(String s) -> System.out.println(s)")]),t._v(" "),s("td",[t._v("System.out::println")])])])]),t._v(" "),s("h3",{attrs:{id:"代码规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码规范"}},[t._v("#")]),t._v(" 代码规范")]),t._v(" "),s("h4",{attrs:{id:"angel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#angel"}},[t._v("#")]),t._v(" Angel")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("类名或方法名迭代：")]),t._v(" "),s("p",[t._v("Angel")]),t._v(" "),s("p",[t._v("Brixton")]),t._v(" "),s("p",[t._v("Camden")]),t._v(" "),s("p",[t._v("Dalston")]),t._v(" "),s("p",[t._v("Edgware")]),t._v(" "),s("p",[t._v("Finchley")])]),t._v(" "),s("li",[s("p",[t._v("对某些数据做加工处理的：")]),t._v(" "),s("p",[t._v("Process RequestUtils")])]),t._v(" "),s("li",[s("p",[t._v("是否正确")]),t._v(" "),s("p",[t._v("IsCorrect")])]),t._v(" "),s("li",[s("p",[t._v("是否存在")]),t._v(" "),s("p",[t._v("isExists")])]),t._v(" "),s("li",[s("p",[t._v("是否有效")]),t._v(" "),s("p",[t._v("isValid")])]),t._v(" "),s("li",[s("p",[t._v("在常量与变量的命名时，表示类型的名词放在词尾，以提升辨识度")]),t._v(" "),s("p",[t._v("正例： startTime / workQueue / nameList / TERMINATED_THREAD_COUNT\n反例： startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD")])])]),t._v(" "),s("h4",{attrs:{id:"新式命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新式命名规范"}},[t._v("#")]),t._v(" 新式命名规范")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("加工：process")])]),t._v(" "),s("li",[s("strong",[t._v("校验：check")])]),t._v(" "),s("li",[s("strong",[t._v("查询：query")])]),t._v(" "),s("li",[s("strong",[t._v("选择：select")])]),t._v(" "),s("li",[s("strong",[t._v("保存：save")])])]),t._v(" "),s("h3",{attrs:{id:"java开发规范、笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java开发规范、笔记"}},[t._v("#")]),t._v(" java开发规范、笔记")]),t._v(" "),s("h4",{attrs:{id:"不要使用一个常量类维护所有常量-要按常量功能进行归类-分开维护。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不要使用一个常量类维护所有常量-要按常量功能进行归类-分开维护。"}},[t._v("#")]),t._v(" 不要使用一个常量类维护所有常量， 要按常量功能进行归类，分开维护。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("说明： 大而全的常量类， 杂乱无章， 使用查找功能才能定位到修改的常量，不利于理解和维护。\n正例： 缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 ConfigConsts 下。 \n")])])]),s("h3",{attrs:{id:"各层命名规约"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#各层命名规约"}},[t._v("#")]),t._v(" 各层命名规约：")]),t._v(" "),s("p",[t._v("A) Service/DAO 层方法命名规约")]),t._v(" "),s("p",[t._v("1） 获取单个对象的方法用 get 做前缀。")]),t._v(" "),s("p",[t._v("2） 获取多个对象的方法用 list 做前缀，复数形式结尾如： listObjects。")]),t._v(" "),s("p",[t._v("3） 获取统计值的方法用 count 做前缀。")]),t._v(" "),s("p",[t._v("4） 插入的方法用 save/insert 做前缀。")]),t._v(" "),s("p",[t._v("5） 删除的方法用 remove/delete 做前缀。")]),t._v(" "),s("p",[t._v("6） 修改的方法用 update 做前缀。")]),t._v(" "),s("p",[t._v("B) 领域模型命名规约")]),t._v(" "),s("p",[t._v("1） 数据对象： xxxDO， xxx 即为数据表名。")]),t._v(" "),s("p",[t._v("2） 数据传输对象： xxxDTO， xxx 为业务领域相关的名称。")]),t._v(" "),s("p",[t._v("3） 展示对象： xxxVO， xxx 一般为网页名称。")]),t._v(" "),s("p",[t._v("4） POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。")]),t._v(" "),s("h3",{attrs:{id:"红花和绿叶-个性和共性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#红花和绿叶-个性和共性"}},[t._v("#")]),t._v(" 红花和绿叶，个性和共性")]),t._v(" "),s("h4",{attrs:{id:"使用集合转数组的方法-必须使用集合的-toarray-t-array-传入的是类型完全一致、长度为-0-的空数组。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用集合转数组的方法-必须使用集合的-toarray-t-array-传入的是类型完全一致、长度为-0-的空数组。"}},[t._v("#")]),t._v(" 使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("反例： 直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出\n现 ClassCastException 错误。\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('正例：\nList<String> list = new ArrayList<>(2);\nlist.add("guan");\nlist.add("bao");\nString[] array = list.toArray(new String[0]);\n说明： 使用 toArray 带参方法，数组空间大小的 length：\n1） 等于 0，动态创建与 size 相同的数组，性能最好。\n2） 大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。\nJava 开发手册\n12/44\n3） 等于 size，在高并发情况下，数组创建完成之后， size 正在变大的情况下，负面影响与上相同。\n4） 大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。 \n')])])]),s("h4",{attrs:{id:"_5-在循环里对集合进行remove-add操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-在循环里对集合进行remove-add操作"}},[t._v("#")]),t._v(" 5.在循环里对集合进行remove/add操作")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public static void main(String[] args) throws Throwable {\n    ArrayList<String> list = new ArrayList<>();\n    list.add("1");\n    list.add("2");\n    list.add("3");\n    list.add("4");\n    list.add("5");\n\t// false，删除3元素后，下次循环list(4) == \'5\'\n    for (int i = 0; i < list.size(); i++) {\n        if ("3".equals(list.get(i))) {\n            list.remove(i);\n        }\n    }\n\t// 若待remove的数字是list最后一顺位，foreach报错java.util.ConcurrentModificationException\n    for (String item : list) {\n        if ("3".equals(item)) {\n            list.remove(item);\n        }\n    }\n\n\t// perfect\n    Iterator<String> iterator = list.iterator();\n    while (iterator.hasNext()) {\n        String next = iterator.next();\n        if("2".equals(next)) {\n          iterator.remove();\n        }\n    }\n\n    System.out.println(list);\n}\n')])])]),s("h4",{attrs:{id:"jdk1-8遍历map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8遍历map"}},[t._v("#")]),t._v(" JDK1.8遍历Map")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('// 创建一个Map\nMap<String, Object> infoMap = new HashMap<>();\ninfoMap.put("name", "sun");\ninfoMap.put("site", "www.github.com");\ninfoMap.put("email", "sunyuanhe_i@163.com");\n// 传统的Map迭代方式\nfor (Map.Entry<String, Object> entry : infoMap.entrySet()) {\n    System.out.println(entry.getKey() + "：" + entry.getValue());\n}\n// JDK8的迭代方式\ninfoMap.forEach((key, value) -> {\n    System.out.println(key + "：" + value);\n\n});\n')])])]),s("h3",{attrs:{id:"五笔常用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五笔常用"}},[t._v("#")]),t._v(" 五笔常用：")]),t._v(" "),s("p",[t._v("tewq=我爱你\nsmu vkeg vkeg tewq=我爱你\nqwet=鉁\nwtbb=傻子")]),t._v(" "),s("h3",{attrs:{id:"反射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[t._v("#")]),t._v(" 反射：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public static void main(String[] args) throws Exception {     Class<StatusEnum> clazz = StatusEnum.class;     StatusEnum[] enumConstants = clazz.getEnumConstants();      Method targetMethod = clazz.getDeclaredMethod("getCode");      StatusEnum result = null;     String typeCodeVal = null;     for(StatusEnum entity:enumConstants){         typeCodeVal = targetMethod.invoke(entity).toString();         if(typeCodeVal.equals("5002")){             result = entity;             break;         }     }      System.out.println(result);     System.out.println(typeCodeVal); }\n')])])]),s("h3",{attrs:{id:"javabean-xml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javabean-xml"}},[t._v("#")]),t._v(" JavaBean -> XML：")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://huatonghh.com/bbw_b2b/coreintf/services/wsController?wsdl",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://huatonghh.com/bbw_b2b/coreintf/services/wsController?wsdl"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("_generatorFactory.createGenerator(bb, JsonEncoding.UTF8), value);\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("createGenerator\n")])])]),s("h3",{attrs:{id:"方便快速切换bookmark"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方便快速切换bookmark"}},[t._v("#")]),t._v(" 方便快速切换bookmark：")]),t._v(" "),s("h3",{attrs:{id:"apimodel-value不能重复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apimodel-value不能重复"}},[t._v("#")]),t._v(" @ApiModel value不能重复：")]),t._v(" "),s("h3",{attrs:{id:"不规则时间转date转规则字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不规则时间转date转规则字符串"}},[t._v("#")]),t._v(" 不规则时间转Date转规则字符串：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public static void main(String[] args) throws Exception {\n    String date = "2019-9-19 9:20:33";\n    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n    Date parse = sdf.parse(date);\n    System.out.println(parse);\n\n    System.out.println(DateFormatUtils.format(parse, "yyyy-MM-dd HH:mm:ss"));\n    System.out.println(DateFormatUtils.format(parse, "yyyy-MM-dd"));\n    System.out.println(DateFormatUtils.format(parse, "HH:mm:ss"));\n}\n')])])]),s("h3",{attrs:{id:"一个索引通常会划分多个type-逻辑上对index有些许不同的几类数据进行分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个索引通常会划分多个type-逻辑上对index有些许不同的几类数据进行分类"}},[t._v("#")]),t._v(" 一个索引通常会划分多个type，逻辑上对index有些许不同的几类数据进行分类：")]),t._v(" "),s("h3",{attrs:{id:"es6以后不再支持mapping下多个type-7-0后更会删除type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6以后不再支持mapping下多个type-7-0后更会删除type"}},[t._v("#")]),t._v(" es6以后不再支持mapping下多个type，7.0后更会删除type：")]),t._v(" "),s("h3",{attrs:{id:"详解logback-xml与logback-spring-xml的区别及联系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#详解logback-xml与logback-spring-xml的区别及联系"}},[t._v("#")]),t._v(" 详解logback.xml与logback-spring.xml的区别及联系")]),t._v(" "),s("p",[t._v("By SnoWalker 发表于 2018-11-02\n文章目录\nlogback和logback-spring.xml都可以用来配置logback，但是2者的加载顺序是不一样的。")]),t._v(" "),s("p",[t._v("加载优先级为：")]),t._v(" "),s("p",[t._v("logback.xml---\x3eapplication.properties---\x3elogback-spring.xml.\nlogback.xml加载早于application.properties，")]),t._v(" "),s("p",[t._v("所以如果你在logback.xml使用了变量时，而恰好这个变量是写在application.properties时，那么就会获取不到，只要改成logback-spring.xml就可以解决。")]),t._v(" "),s("p",[t._v("官网的说明如下：\n"),s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1617783751438.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"取消idea保存文件-默认删除行尾空格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取消idea保存文件-默认删除行尾空格"}},[t._v("#")]),t._v(" 取消IDEA保存文件，默认删除行尾空格")]),t._v(" "),s("p",[t._v("IDEA保存文件，默认删除行尾空格，对于代码规范是件好事；\n但是，对于Git版本控制，有时弊大于利，保存文件容易保存不必要的更改；\n"),s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1619056259772.png",alt:"enter description here"}})]),t._v(" "),s("h3",{attrs:{id:"lombok-accessors用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lombok-accessors用法"}},[t._v("#")]),t._v(" lombok @Accessors用法")]),t._v(" "),s("blockquote",[s("p",[t._v("@Accessors\nAccessor的中文含义是存取器，@Accessors用于配置getter和setter方法的生成结果，下面介绍三个属性")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("fluent\nfluent的中文含义是流畅的，设置为"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("，则getter和setter方法的方法名都是基础属性名，且setter方法返回当前对象。如下\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Data")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Accessors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fluent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成的getter和setter方法如下，方法体略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("chain\nchain的中文含义是链式的，设置为"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("，则setter方法返回当前对象。如下\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Data")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Accessors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chain "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成的setter方法如下，方法体略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("prefix\nprefix的中文含义是前缀，用于生成getter和setter方法的字段名会忽视指定前缀（遵守驼峰命名）。如下\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Data")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Accessors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prefix "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"p"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" pId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" pName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成的getter和setter方法如下，方法体略")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("官网文档 https://projectlombok.org/features/experimental/Accessors")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"java知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java知识点"}},[t._v("#")]),t._v(" JAVA知识点：")]),t._v(" "),s("p",[t._v("基础：")]),t._v(" "),s("ol",[s("li",[t._v("list、set、map。直接从存储内容来说 循环map几种方法")]),t._v(" "),s("li",[t._v("hashmap hashtable。 直接从源码上说 table有synchronized，所以慢")]),t._v(" "),s("li",[t._v("静态变量、成员变量、静态方法、构造方法、普通方法 区别：执行顺序")]),t._v(" "),s("li",[t._v("类的加载顺序，类的加载器：AppClassLoader ExtClassLoader BootstrpClassLoader")]),t._v(" "),s("li",[t._v("设计模式：单利设计模式 静态内部类")]),t._v(" "),s("li",[t._v("说一说排序算法，稳定性，复杂度")])]),t._v(" "),s("p",[t._v("架构：\n1.Spring MVC：源码解读 https://www.cnblogs.com/lzeffort/p/7858439.html\ndispathcerservlet 继承 farmemakrsetvlet 继承httpServlet")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Dispatcherservlet 两部分，一部分初始化 一部分 doservice\n1.initservletbean();\n2.initwebapplicationcontext();\n3.onrefresh();\n4.inithaddermappting ,inithanderadapter, initview\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.doservice ,doDispatch 里\nhandermapping handeradapter modelview view \n")])])]),s("p",[t._v("2.mybatis 和 HQL区别、Struts2 和 SPringMVC区别\n3.多线程")]),t._v(" "),s("p",[t._v("多线程效率：")]),t._v(" "),s("p",[t._v("多线程 new Thread 、Runnable  （run 方法下都是 native的 start0());")]),t._v(" "),s("p",[t._v("线程池: 个数 = cpu核数 * 线程堵塞时间 + 线程执行时间 / 线程执行时间")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("多线程安全：\nsynchronized 单利设计模式：静态内部类\n日期类    SimpleDateFormat线程不安全； \nDateFormatUtils 线程安全 ：synchronized FastDateFormat；\nArrayList：Collections.synchronizedList();\nHashMap：ConcurrentHashMap ---  lock()，unlock()\n对账时的写文件。BufferedWriter 效率高 线程安全\nStringBuffer ：线程安全synchronized \n\n死锁的处理：\n检测死锁并恢复\n鸵鸟算法忽略\n仔细对资源进行动态分配，以避免死锁。△\n")])])]),s("p",[t._v("4.高并发\n系统架构SOA思想、\n多台服务器多个节点负载均衡、\n消息中间件MQ缓解压力、\n如果涉及页面就 用电商项目的 静态资源、缓存等等、")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("微服务实现形式\n\n多线程可以解决高并发、\n\n高并发带来的大量数据问题：读写分离、分库分表 最好查一下 如何分库 读写分离的\n\n紧急情况：有时候的高并发并不是可以预料到的，举例：\n1 增加web服务器数量，也就是做集群，做负载均衡。既然一台服务器无法完成任务，那就多用几台\n2 redis增加容量。设置有效期。\n3 减少数据库的操作。\n")])])]),s("p",[t._v("5.数据库\n常用 sql。左关联 右关联、常用函数decode val 平均值 去重等等")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sql事务的问题：\n\t1.一个事务下 先进行插入 再查询这条数据，是否能查出来\n\t2.a表id = 001, b表id是001的 有三条， a left join b on a=b 一共几条数据\n")])])]),s("p",[t._v("6.开发中的问题：\nSPring的注解\njdk版本差异，jdk12优化switch以及GC\nSpring版本、linux版本\n服务器崩掉了怎么办\n除了synchronized关键字之外，你是怎么来保障线程安全的？\nAQS\nTomcat本身的参数你一般会怎么调整\n如果一个接口有2个不同的实现, 那么怎么来Autowire一个指定的实现\n和上一个问题一样，mybatis配置两个相同ID如何区分。\n如何自定义一个类加载器\n简述三次握手，如果c端发起握手请求，s端无法立刻建立连接应该回应什么？\njvm内存结构。\n方法区里什么样的对象有可能被回收。\n线程池创建有几种，为什么创建定长的线程池个数最好是5，10，15这样的数字。\nlinux命令。常用部署 以及 内存溢出看down文件")]),t._v(" "),s("h3",{attrs:{id:"mysql-java实体互转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-java实体互转"}},[t._v("#")]),t._v(" MySql => Java实体互转：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型名称")]),t._v(" "),s("th",[t._v("显示长度")]),t._v(" "),s("th",[t._v("数据库类型")]),t._v(" "),s("th",[t._v("java类型")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("varchar")]),t._v(" "),s("td",[t._v("L+N")]),t._v(" "),s("td",[t._v("varchar")]),t._v(" "),s("td",[t._v("String")])]),t._v(" "),s("tr",[s("td",[t._v("integer")]),t._v(" "),s("td",[t._v("4")]),t._v(" "),s("td",[t._v("integer unsigned")]),t._v(" "),s("td",[t._v("Long")])]),t._v(" "),s("tr",[s("td",[t._v("tinyint")]),t._v(" "),s("td",[t._v("3")]),t._v(" "),s("td",[t._v("tinyint unsigned")]),t._v(" "),s("td",[t._v("integer")])]),t._v(" "),s("tr",[s("td",[t._v("bigint")]),t._v(" "),s("td",[t._v("20")]),t._v(" "),s("td",[t._v("bigint unsigned")]),t._v(" "),s("td",[t._v("BigInteger")])])])]),t._v(" "),s("h3",{attrs:{id:"white-jotter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#white-jotter"}},[t._v("#")]),t._v(" "),s("strong",[t._v("White Jotter")])]),t._v(" "),s("ol",[s("li",[t._v("查看node版本：")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("查看npm版本：")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("npm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("将 npm 更新至最新版本")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm -g install npm\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("安装 cnpm，即 npm 的国内镜像")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("安装 cnpm 的命令为 ：\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n完成后就可以使用 cnpm 替代 npm 了，我不太喜欢用 cnpm，喜欢用的小伙伴注意一点，cnpm 不要与 npm 混合使用，一个项目用 cnpm 就从头用到底，不要中途敲错命令，否则就会出现混乱。不过万一遇到这种情况也不用慌，把项目的 node_modules 文件夹删了重新执行 npm/cnpm install 就行了，只是比较浪费时间。\n")])])]),s("ol",{attrs:{start:"5"}},[s("li",[t._v("安装脚手架")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install -g vue-cli\n")])])]),s("h3",{attrs:{id:"idea注释快捷键"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idea注释快捷键"}},[t._v("#")]),t._v(" IDEA注释快捷键：")]),t._v(" "),s("p",[t._v("return")]),t._v(" "),s("p",[t._v("groovyScript(\"def returnType = \"${_1}\"; def result ='';if(returnType=='null'||returnType=='void'){return;}else{result += '\\n * @return\t' + returnType; return result;}\", methodReturnType());")]),t._v(" "),s("p",[t._v("return方法空值：groovyScript(\"def returnType = \"${_1}\"; def result ='';if(returnType=='null'||returnType=='void'){return;}else{result += '\\n * @return\t' + returnType; return result;}\", \"\");")]),t._v(" "),s("p",[t._v("params")]),t._v(" "),s("p",[t._v("groovyScript(\"if(\"${_1}\".length() == 2) {return '';} else {def result=''; def params=\"${_1}\".replaceAll('[\\\\[|\\\\]|\\\\s]', '').split(',').toList();for(i = 0; i < params.size(); i++) {if(params[i]=='null'){return;}else{result+='\\n' + ' * @param\t' + params[i] + ': '}}; return result;}\", methodParameters());")]),t._v(" "),s("p",[t._v("time\ntime()")]),t._v(" "),s("p",[t._v("date\ndate()")]),t._v(" "),s("h3",{attrs:{id:"idea打开类结构图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#idea打开类结构图"}},[t._v("#")]),t._v(" idea打开类结构图")]),t._v(" "),s("div",{staticClass:"language-stata extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 鼠标选中实例对象或者类，上方菜单工具栏：Navigate——》Type Hierarchy\n")])])]),s("div",{staticClass:"language-less extra-class"},[s("pre",{pre:!0,attrs:{class:"language-less"}},[s("code",[t._v("<?xml version="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0"')]),t._v(" encoding="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UTF-8"')]),t._v("?>\n<beans xmlns="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.springframework.org/schema/beans"')]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("xmlns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("xsi="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.w3.org/2001/XMLSchema-instance"')]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("xmlns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("util="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.springframework.org/schema/util"')]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("xmlns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("p="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.springframework.org/schema/p"')]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("xsi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('schemaLocation="'),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("http")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("http")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">')]),t._v("\n\n    <bean id="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myTestBean"')]),t._v(" class="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyTestBean"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(">\n\n<"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("beans>\n\n\n\nSuppressWarnings"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v('( " deprecation ” ）\npublic class BeanFactoryTest')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),s("span",{pre:!0,attrs:{class:"token atrule"}},[t._v("@Test\n\tpublic void testSirnpleLoad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tBeanFactory bf = new XrnlBeanFactory "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new ClassPathResource "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("”beanFactoryTest.xml”））；\n\t\tMyTestBean bea n="),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyTestBean "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bf.getBean （” rnyTestBean ”）；\n\t\tassertEquals "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("”testSt r ”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bean "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTestStr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"java自定义注解-interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java自定义注解-interface"}},[t._v("#")]),t._v(" Java自定义注解@interface")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://blog.csdn.net/qq_35625303/article/details/79403820\nhttps://www.jianshu.com/p/e6b44d8cec5a\n")])])]),s("p",[s("strong",[t._v("@Import")]),t._v("：可以理解为 和@Bean、@Configuration一个意思")]),t._v(" "),s("h3",{attrs:{id:"git更换仓库-保留分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git更换仓库-保留分支"}},[t._v("#")]),t._v(" git更换仓库，保留分支")]),t._v(" "),s("p",[t._v("git更换仓库，保留分支，保留提交记录及开发权限\n别人推荐的方法都很复杂，这个步骤自己亲自尝试过，非常简单好用。")]),t._v(" "),s("p",[t._v("1、从原地址克隆一份裸版本库，比如原本托管于 GitHub。\ngit clone --bare https://github....(原始仓库地址)\ngit clone --bare https://git.huatonghh.com/car_b2b/taishan/backend.git")]),t._v(" "),s("p",[t._v("2、进入克隆下来的目录\ncd project.git（project即为你的项目名称）")]),t._v(" "),s("p",[t._v("3、以镜像推送的方式上传代码到新的仓库地址。\ngit push --mirror http：//...(目标仓库地址)\ngit push --mirror http://10.1.5.5/kscd/backend.git")]),t._v(" "),s("h3",{attrs:{id:"spring-security-oauth2-登录过程详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-security-oauth2-登录过程详解"}},[t._v("#")]),t._v(" spring security oauth2 登录过程详解")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/weixin_34245082/article/details/88022652",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/weixin_34245082/article/details/88022652"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"oauth实现验证码登录-项目地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oauth实现验证码登录-项目地址"}},[t._v("#")]),t._v(" oauth实现验证码登录：项目地址：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://gitee.com/lvhaibao/spring-lhbauth/blob/34a4e781abeb9f1115b7a2e53141e0fed2915757/spring-lhbauth-jwt/src/main/java/com/lhb/lhbauth/jwt/demo/web/controller/AuthPageController.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gitee.com/lvhaibao/spring-lhbauth/blob/34a4e781abeb9f1115b7a2e53141e0fed2915757/spring-lhbauth-jwt/src/main/java/com/lhb/lhbauth/jwt/demo/web/controller/AuthPageController.java"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"服务器常见目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器常见目录"}},[t._v("#")]),t._v(" 服务器常见目录")]),t._v(" "),s("h3",{attrs:{id:"jenkins工作空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jenkins工作空间"}},[t._v("#")]),t._v(" jenkins工作空间")]),t._v(" "),s("div",{staticClass:"language-crystal extra-class"},[s("pre",{pre:!0,attrs:{class:"language-crystal"}},[s("code",[t._v("cd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("var"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lib")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("jenkins"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("workspace\n")])])]),s("h3",{attrs:{id:"nginx配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx配置"}},[t._v("#")]),t._v(" nginx配置")]),t._v(" "),s("div",{staticClass:"language-stata extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cd /etc/nginx/conf.d\n")])])]),s("h3",{attrs:{id:"前端部署的路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端部署的路径"}},[t._v("#")]),t._v(" 前端部署的路径")]),t._v(" "),s("div",{staticClass:"language-groovy extra-class"},[s("pre",{pre:!0,attrs:{class:"language-groovy"}},[s("code",[t._v("cd "),s("span",{pre:!0,attrs:{class:"token string regex"}},[t._v("/usr/")]),t._v("share"),s("span",{pre:!0,attrs:{class:"token string regex"}},[t._v("/nginx/")]),t._v("\n")])])]),s("h3",{attrs:{id:"后端部署的路径"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后端部署的路径"}},[t._v("#")]),t._v(" 后端部署的路径")]),t._v(" "),s("div",{staticClass:"language-haskell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-haskell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("cd")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("java_app")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token hvariable"}},[t._v("uat_bbw_b2bserver_8108")]),t._v("\n")])])]),s("h2",{attrs:{id:"常用linux命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用linux命令"}},[t._v("#")]),t._v(" 常用linux命令")]),t._v(" "),s("h3",{attrs:{id:"netstat-lntp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#netstat-lntp"}},[t._v("#")]),t._v(" netstat -lntp")]),t._v(" "),s("div",{staticClass:"language-tap extra-class"},[s("pre",{pre:!0,attrs:{class:"language-tap"}},[s("code",[t._v("[root@localhost /]"),s("span",{pre:!0,attrs:{class:"token directive"}},[t._v("# netstat -lntp")]),t._v("\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd           \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1261/sshd           \ntcp6       0      0 :::111                  :::*                    LISTEN      1/systemd           \ntcp6       0      0 :::22                   :::*                    LISTEN      1261/sshd\n")])])]),s("h3",{attrs:{id:"日志检索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日志检索"}},[t._v("#")]),t._v(" 日志检索")]),t._v(" "),s("ul",[s("li",[s("p",[t._v('从大文件日志中快速搜索指定内容\ngrep -n -e "msg" -e "msg" ***.log | tail -n 5')])]),t._v(" "),s("li",[s("p",[t._v("跳转到指定日志行数处\nvim +3443 ***.log")])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('从文件内容查找匹配指定字符串的行：\n\n$ grep "被查找的字符串" 文件名\n例子：在当前目录里第一级文件夹中寻找包含指定字符串的.in文件\ngrep "thermcontact" */*.in\n\n从文件内容查找与正则表达式匹配的行：\n$ grep –e “正则表达式” 文件名\n\n查找时不区分大小写：\n$ grep –i "被查找的字符串" 文件名\n\n查找匹配的行数：\n$ grep -c "被查找的字符串" 文件名\n\n\n从文件内容查找不匹配指定字符串的行：\n$ grep –v "被查找的字符串" 文件名\n')])])]),s("ul",[s("li",[t._v("检索指定内容，并输出行数，截取行数展示")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("grep -n -e \"60ee60b2e4b074b9b078ea01-1\" 20210714115618.log | tail -n 1 |awk -F: '{print $1}'\n")])])]),s("ul",[s("li",[t._v("获取redis-server这个进程的pid")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ps -ef | grep redis-server | grep -v grep | awk '{print $2}'   \n\ngrep -v grep 去除包含grep的进程行 ，避免影响最终数据的正确性\n")])])]),s("h3",{attrs:{id:"开通端口、关闭防火墙-百度即可"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开通端口、关闭防火墙-百度即可"}},[t._v("#")]),t._v(" 开通端口、关闭防火墙（百度即可）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 由于泰山服务器还需要暴露这两个端口：9876、8080\n\n# 查看已开放的端口\nfirewall-cmd --list-ports\n\n# 开放端口（开放后需要要重启防火墙才生效）\nfirewall-cmd --zone=public --add-port=9876/tcp --permanent\n\n# 重启防火墙\nfirewall-cmd --reload\n\n# 关闭端口（关闭后需要要重启防火墙才生效）\nfirewall-cmd --zone=public --remove-port=9876/tcp --permanent\n\n# 开机启动防火墙\nsystemctl enable firewalld\n\n# 开启防火墙\nsystemctl start firewalld\n\n# 禁止防火墙开机启动\nsystemctl disable firewalld\n\n# 停止防火墙\nsystemctl stop firewalld\n")])])]),s("h3",{attrs:{id:"查看软件是否安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看软件是否安装"}},[t._v("#")]),t._v(" 查看软件是否安装")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" -qa"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" xx\n")])])]),s("h3",{attrs:{id:"列出软件安装包安装的文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#列出软件安装包安装的文件"}},[t._v("#")]),t._v(" 列出软件安装包安装的文件")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" -ql\n")])])]),s("h3",{attrs:{id:"查看mysql所有安装包的文件存储位置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看mysql所有安装包的文件存储位置"}},[t._v("#")]),t._v(" 查看mysql所有安装包的文件存储位置")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" -qal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" mysql\n\n-i：可获取详细的安装目录\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rpm")]),t._v(" -qa"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -i mysql\n")])])]),s("h3",{attrs:{id:"通过find去查找某个文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过find去查找某个文件"}},[t._v("#")]),t._v(" 通过find去查找某个文件")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" / -name mysql\n")])])]),s("h3",{attrs:{id:"which查找命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#which查找命令"}},[t._v("#")]),t._v(" which查找命令")]),t._v(" "),s("blockquote",[s("p",[t._v("通过path环境变量查找执行的文件路径")])]),t._v(" "),s("h3",{attrs:{id:"创建文件的引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建文件的引用"}},[t._v("#")]),t._v(" 创建文件的引用")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ln")]),t._v(" -s /home/kscd/mysql/mysql.sock /tmp\n")])])]),s("blockquote",[s("p",[t._v("在非root用户离线安装mysql时，需要将mysql.scok创建到/tmp下，以便于启动。")])]),t._v(" "),s("h3",{attrs:{id:"查找一个符合搜索条件的文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找一个符合搜索条件的文件"}},[t._v("#")]),t._v(" 查找一个符合搜索条件的文件")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("kscd@localhost mysql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" error.log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" root@localhost\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v("-09-14T03:44:13.306713Z "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Note"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" A temporary password is generated "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" root@localhost: 5dpc498ad5,X\n")])])]),s("h3",{attrs:{id:"查看占用端口的进程id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看占用端口的进程id"}},[t._v("#")]),t._v(" 查看占用端口的进程id")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lsof")]),t._v(" -i:9100\n")])])]),s("h3",{attrs:{id:"上传文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上传文件"}},[t._v("#")]),t._v(" 上传文件")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("scp")]),t._v(" jdk-8u251-linux-x64.tar.gz kscd@10.1.4.193:~/deploy/jdk\n")])])]),s("h3",{attrs:{id:"kibana重启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kibana重启"}},[t._v("#")]),t._v(" kibana重启")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -ef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" kibana\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -ef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5601")]),t._v("\n都找不到\n\n \n尝试 使用 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fuser")]),t._v(" -n tcp "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5601")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" -9 端口\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -ef"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" node   或 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("netstat")]),t._v(" -anltp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5601")]),t._v("\n启动即可 ./kibana\n后台启动：nohup "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/bin/kibana "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"git仓库间推送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git仓库间推送"}},[t._v("#")]),t._v(" git仓库间推送")]),t._v(" "),s("hr"),t._v(" "),s("div",{staticClass:"language-jboss-cli extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1、从原地址克隆一份裸版本库，比如原本托管于 GitHub。\n\ngit clone --bare https://github....(原始仓库地址)\n\ngit clone --bare https://git.huatonghh.com/car_b2b/taishan/backend.git\n\n2、进入克隆下来的目录\n\ncd project.git（project即为你的项目名称）\n\n3、以镜像推送的方式上传代码到新的仓库地址。\n\ngit push --mirror http：//...(目标仓库地址)\n\ngit push --mirror http://10.1.5.5/kscd/backend.git\n")])])]),s("h3",{attrs:{id:"【git教程】如何清除git仓库的所有提交记录-成为一个新的干净仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【git教程】如何清除git仓库的所有提交记录-成为一个新的干净仓库"}},[t._v("#")]),t._v(" 【Git教程】如何清除git仓库的所有提交记录，成为一个新的干净仓库")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("https:"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//www.cnblogs.com/msxh/p/11082246.html")]),t._v("\n阅读目录\n\n一、引言\n二、操作步骤\n回到顶部\n一、引言\n　　马三也算Github的忠实用户了，经常会把一些练手的项目传到Github上面进行备份。其中有一个名为ColaFramework的Unity框架项目，马三开发了一年多了，期间提交代码的时候在Log中上传了一些比较敏感的信息，这些信息都可以在Github上面搜索到，马三想把这些Log信息清除掉，使其变成一个没有提交记录的“新仓库”。于是我在网上一搜，步骤还挺简单的，直接按照下面一步步操作就可以了。\n\n回到顶部\n二、操作步骤\n　　"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("切换到新的分支\n\ngit checkout "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--orphan latest_branch")]),t._v("\n　　"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("缓存所有文件（除了"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore中声明排除的）\n\n git "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("A\n　　"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("提交跟踪过的文件（"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Commit")]),t._v(" the changes）\n\n git "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("am "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit message"')]),t._v("\n　　"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v("删除master分支（"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Delete")]),t._v(" the branch）\n\ngit branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("D master\n　　"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),t._v("重命名当前分支为master（"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Rename")]),t._v(" the "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("current")]),t._v(" branch "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" master）\n\n git branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m master\n　　"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6.")]),t._v("提交到远程master分支 （Finally"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("force")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" your repository）\n\n git push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f origin master\n　　通过以上几步就可以简单地把一个Git仓库的历史提交记录清除掉了，不过最好还是在平时的开发中严格要求一下提交日志的规范，尽量避免在里面输入一些敏感信息进来。\n")])])]),s("h3",{attrs:{id:"查看linux是x86还是x64"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看linux是x86还是x64"}},[t._v("#")]),t._v(" 查看Linux是x86还是x64")]),t._v(" "),s("div",{staticClass:"language-php+HTML extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("在终端输入： getconf LONG_BIT\n\n输出：64 or 32\n")])])]),s("h3",{attrs:{id:"查看环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看环境变量"}},[t._v("#")]),t._v(" 查看环境变量")]),t._v(" "),s("div",{staticClass:"language-php+HTML extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo $PATH\n")])])]),s("h3",{attrs:{id:"rpm-qa-grep-xxxx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rpm-qa-grep-xxxx"}},[t._v("#")]),t._v(" rpm -qa | grep xxxx")]),t._v(" "),s("div",{staticClass:"language-php+HTML extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("RPM是RedHat Package Manger（RedHat软件管理工具),是一种用于打包及安装工具\n\n-qa代表query，a代表all\n\ngrep(global search rgular expression(RE) and print out the line):是一种强大的文本搜索工具\n")])])]),s("h3",{attrs:{id:"查看linux操作系统是centos还是red-hat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看linux操作系统是centos还是red-hat"}},[t._v("#")]),t._v(" 查看linux操作系统是centos还是red hat")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cat /etc/issue\ncat /etc/redhat-release \ncat /etc/centos-release\n")])])]),s("h3",{attrs:{id:"tar常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tar常用命令"}},[t._v("#")]),t._v(" tar常用命令")]),t._v(" "),s("div",{staticClass:"language-vala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vala"}},[s("code",[t._v("打包成tar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gz格式压缩包\n# tar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("zcvf renwolesshel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gz "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("renwolesshel\n\n解压tar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gz格式压缩包\n# tar zxvf renwolesshel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gz\n\n打包成tar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bz2格式压缩包\n# tar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("jcvf renwolesshel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bz2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("renwolesshel\n\n解压tar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bz2格式的压缩包\n# tar jxvf renwolesshel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bz2\n\n压缩成zip格式\n# zip "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("r renwolesshel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zip renwolesshel"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n\n解压zip格式的压缩包\n# unzip renwolesshel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zip\n")])])]),s("h3",{attrs:{id:"linux查看redis安装目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux查看redis安装目录"}},[t._v("#")]),t._v(" linux查看redis安装目录")]),t._v(" "),s("div",{staticClass:"language-vim extra-class"},[s("pre",{pre:!0,attrs:{class:"language-vim"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("在redis下查看安装目录\n\n如果命令 which 和whereis 都找不到安装目录，可使用以下办法\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ps")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ef")]),t._v("|"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("grep")]),t._v(" redis\n得到了进程号 xxxx\n\n 然后 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ls")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("l")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("proc"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xxxx"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("cwd\n")])])]),s("p",[s("img",{attrs:{src:"https://yh-sun.github.io/note-cloud/1605700356252.png",alt:"enter description here"}})]),t._v(" "),s("h2",{attrs:{id:"spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("AOP:Aspect Programming 面向切面编程\n\n")])])]),s("h2",{attrs:{id:"spring-cloud-alibaba搭建保司微服务项目时使用的相关组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-alibaba搭建保司微服务项目时使用的相关组件"}},[t._v("#")]),t._v(" spring cloud alibaba搭建保司微服务项目时使用的相关组件")]),t._v(" "),s("h3",{attrs:{id:"_1-nacos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-nacos"}},[t._v("#")]),t._v(" 1.Nacos")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("本地Nacos地址：127.0.0.1:8848/nacos\n账号：nacos\n密码：nacos\n")])])]),s("h3",{attrs:{id:"_2-spring-cloud-alibaba-sentinel-网关流量控制台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-cloud-alibaba-sentinel-网关流量控制台"}},[t._v("#")]),t._v(" 2.Spring Cloud Alibaba Sentinel 网关流量控制台")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("sentinel-dashboard.jar包(1.7.1版本，与系统引入包版本相同)\n\n启动脚本：\njava -Dserver.port=8888 -Dcsp.sentinel.dashboard.server=localhost:8888 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar\n\n登录控制台：\n地址：localhost:8888\n账户：sentinel\n密码：sentinel\n")])])]),s("h3",{attrs:{id:"_3-关于spring-cloud-gateway的现阶段配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-关于spring-cloud-gateway的现阶段配置"}},[t._v("#")]),t._v(" 3.关于Spring Cloud GateWay的现阶段配置")]),t._v(" "),s("h4",{attrs:{id:"_3-1-gateway-discovery"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-gateway-discovery"}},[t._v("#")]),t._v(" 3.1 gateway.discovery：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("集成nacos注册中心后，加入此配置遍可通过注册的服务名来进行路由的控制，比如：http://localhost:8180/auth、sys\n但默认的前面还有个taishan简直是太丑了，所以加了...\n")])])]),s("h4",{attrs:{id:"_3-2-gateway-routes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-gateway-routes"}},[t._v("#")]),t._v(" 3.2 gateway.routes：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("- id: insurance\n  uri: lb://insurance\n  predicates:\n    - Path=/ins/**\n  filters:\n    - StripPrefix=1\n∴自定义的路由配置：\n    例如请求：http://localhost:8180/ins/api/test\n        ->  通过insurance找到/ins/**对应的lb://insurance，lb代表从注册中心找这个<insurance>服务\n        ->  找到服务后：http://localhost:8182/ins/api/test\n        ->  filters- StripPrefix=1，将url头部断掉（断头台）\n        ->  http://localhost:8182/api/test\n")])])]),s("h4",{attrs:{id:"_3-3-globalcors跨域设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-globalcors跨域设置"}},[t._v("#")]),t._v(" 3.3 globalcors跨域设置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("TODO: 尚未确定是否生效\n")])])]),s("h4",{attrs:{id:"_3-4-sentinel配置-注-请参考spring-cloud-alibaba-sentinel-网关流量控制台"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-sentinel配置-注-请参考spring-cloud-alibaba-sentinel-网关流量控制台"}},[t._v("#")]),t._v(" 3.4 sentinel配置（注：请参考Spring Cloud Alibaba Sentinel 网关流量控制台）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("4.1 集成的是gateway的sentinel，还没确定transport.port的真实意义，显意上不配置不影响流程；\n4.2 transport.dashboard即为本地搭建的sentinel.1.7.1.jar包启动地址；\n4.3 目前【降级】没有问题，但【熔断】在低版本的sentinel包中有效，本版本配置页面变动，配置后不生效，问题待解决。\n")])])]),s("h3",{attrs:{id:"_4-关于鉴权"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-关于鉴权"}},[t._v("#")]),t._v(" 4.关于鉴权：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v('由于想保留项目长期使用的spring security，包含自定义的<登录自定义校验>、<多种登录逻辑>，现阶段如果采用Oauth2.0风险较大（主要是整不出来0=0），\n但由于spring security一直都使用单体的形式，所以这次将【请求权限校验】与【登录授权】拆开；\n    1.网关不做认证授权：开始想做，但是spring cloud gateway与spring security不兼容，关于配置、注解都要改变；\n        前者使用：WebFlux，后者使用：WebSecurity；\n        如果配置WebSecurity在GateWay里不生效，如果配置WebFlux，不特么知道咋写，大爷的，好气；\n        \n        集成好处：网关完全管理鉴权，并且配置方便；\n        集成劣势：其他服务的鉴权无法保证，并且做不出来的都属于缺陷，嘿嘿。\n    2.权限校验：\n        b2b-auth-api    +   SecurityConfiguration.java\n        需要校验的服务配置一个SecurityConfiguration.java，上面写上需要忽略拦截的地址，以及不需要拦截的地址；\n        .antMatchers("/system-test").permitAll()\n        .antMatchers("/api/**").authenticated()\n    3.登录授权：\n        b2b-auth-service\n        POST：http://localhost:8180/auth/api/authenticate（地址后续会变动，具体看接口实际地址）\n        REQUEST:\n            {\n            \t"username": "0000",\n            \t"password": "我是假的密码，防止源码报错",\n            \t"rememberMe": true,\n            \t"imgId": "我是没用的验证码图片",\n            \t"checkCode": "ceshidizhi"\n            }\n        \n        RESPONSE：\n        {\n            "code": "200",\n            "message": "OK",\n            "result": {\n                "id_token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiIwMDAwIiwiYXV0aCI6IjEsMiIsImV4cCI6MTU5NDQ2Mjc3NH0.m64W2p4j9NKap0p02C054o5kMceXWXJ4JIjAG78FkFnE-hINHe_iVRyE5VxpIBgOWyuU54PWIZzOcGOz7ADYEA"\n            }\n        }\n')])])]),s("h3",{attrs:{id:"_5-rocketmq"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-rocketmq"}},[t._v("#")]),t._v(" 5.RocketMQ：")]),t._v(" "),s("h4",{attrs:{id:"_5-1-部署、运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-部署、运行"}},[t._v("#")]),t._v(" 5.1 部署、运行")]),t._v(" "),s("blockquote",[s("p",[t._v("本次采用在10.1.4.194，部署RocketMQ，想适用的小伙伴请自行链接VPN")])]),t._v(" "),s("ul",[s("li",[t._v("下载RocketMQ")])]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("rocketMQ执行包（二进制文件即可，不用再次编译）：\n\t直接去apache rocketmq官网下即可，本次选择：rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("all"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.7")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("release"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zip\nrocketMQ控制台：\n\tgit clone https"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("github"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("apache"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("externals\n")])])]),s("ul",[s("li",[t._v("运行RocketMQ程序：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('cd bin\n\nvim runserver.sh 、vim runbroker.sh\n\n# 找到如下配置\nJAVA_OPT="${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g"\n# 修改成你可以接受的范围\nJAVA_OPT="${JAVA_OPT} -server -Xms512m -Xmx521m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"\n\n# 由于kscd账户配置的环境变量在~/.bash_profile，默认无法识别，所以需要手动指定jdk路径\n1.首先注释掉，以下三行\n# [ ! -e "$JAVA_HOME/bin/java" ] && JAVA_HOME=$HOME/jdk/java\n# [ ! -e "$JAVA_HOME/bin/java" ] && JAVA_HOME=/usr/java\n# [ ! -e "$JAVA_HOME/bin/java" ] && error_exit "Please set the JAVA_HOME variable in your environment, We need java(x64)!"\n2.手动配置JDK路径\nexport JAVA_HOME=/home/kscd/jdk1.8\n')])])]),s("ul",[s("li",[t._v("配置环境变量")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("vi ~/.bash_profile\n\n# 将如下配置加到最后一行\nexport NAMESRV_ADDR=127.0.0.1:9876\n\nsource ~/.bash_profile\n")])])]),s("ul",[s("li",[t._v("启动Name Server")])]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("cd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RocketMQ")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bin\n\nnohup sh mqnamesrv "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RocketMQ")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("logs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检测是否启动成功")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@localhost")]),t._v(" bin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ tail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RocketMQ")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("logs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Java")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HotSpot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TM")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Bit")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Server")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VM")]),t._v(" warning"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Using")]),t._v(" the "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DefNew")]),t._v(" young collector with the "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CMS")]),t._v(" collector is deprecated "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" will likely be removed "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" a future release\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Java")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HotSpot")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TM")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Bit")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Server")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("VM")]),t._v(" warning"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UseCMSCompactAtFullCollection")]),t._v(" is deprecated "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" will likely be removed "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" a future release"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("The")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Server")]),t._v(" boot success"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" serializeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),t._v("\n\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 顺便说下停止命令")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@localhost")]),t._v(" bin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ sh mqshutdown namesrv\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("The")]),t._v(" mqnamesrv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36838")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" is running"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Send")]),t._v(" shutdown request to mqnamesrv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36838")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v("\n")])])]),s("ul",[s("li",[t._v("启动Broker")])]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("cd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RocketMQ")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bin\n\nnohup sh mqbroker "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9876")]),t._v(" autoCreateTopicEnable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RocketMQ")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("logs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("broker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检测是否启动成功")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@localhost")]),t._v(" bin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ tail "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RocketMQ")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("logs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("broker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("The")]),t._v(" broker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("localdomain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.1")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".4")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".194")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10911")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" boot success"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" serializeType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" name server is localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9876")]),t._v("\n\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 顺便说下停止命令")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@localhost")]),t._v(" bin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ sh mqshutdown broker\n")])])]),s("ul",[s("li",[t._v("启动控制台")])]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 由于本次采用的是git clone打包的启动方式，还是要啰嗦一句：“修改的两处配置文件”")]),t._v("\ncd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("local"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("externals"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("resources\n\nvim application"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("properties\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改如下配置")]),t._v("\nserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 服务端口号\nrocketmq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("namesrvAddr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9876")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 配置服务地址\n\nrocketmq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dataPath"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" mq数据路径，可以自己修改\n\ncd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("local"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("externals"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("console\n\nmvn clean package "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("Dmaven")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("skip"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\nnohup java "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("jar rocketmq"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ng"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("jar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("server"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("port"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("rocketmq"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("namesrvAddr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9876")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 日志默认位置：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("home"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("kscd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RocketMQ")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nohup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out\n")])])]),s("ul",[s("li",[t._v("开通端口、关闭防火墙（百度即可）")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 由于泰山服务器还需要暴露这两个端口：9876、8080\n\n# 查看已开放的端口\nfirewall-cmd --list-ports\n\n# 开放端口（开放后需要要重启防火墙才生效）\nfirewall-cmd --zone=public --add-port=9876/tcp --permanent\n\n# 重启防火墙\nfirewall-cmd --reload\n\n# 关闭端口（关闭后需要要重启防火墙才生效）\nfirewall-cmd --zone=public --remove-port=9876/tcp --permanent\n\n# 开机启动防火墙\nsystemctl enable firewalld\n\n# 开启防火墙\nsystemctl start firewalld\n\n# 禁止防火墙开机启动\nsystemctl disable firewalld\n\n# 停止防火墙\nsystemctl stop firewalld\n")])])]),s("h4",{attrs:{id:"_5-2-使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-使用"}},[t._v("#")]),t._v(" 5.2 使用")]),t._v(" "),s("blockquote",[s("p",[t._v("控制台：http://10.1.4.194:8080/")])]),t._v(" "),s("blockquote",[s("p",[t._v("兄弟姐妹们，欢迎一起踩坑："),s("a",{attrs:{href:"https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/rocketmq-example/readme-zh.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("RocketMQ Example"),s("OutboundLink")],1)])]),t._v(" "),s("hr"),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('rocketmq-producer:\n    output1:\n    \tdestination: test-topic1\n    # java(MessageBuilder.setHeader(TAGS, "tabObj"))\nrocketmq-consumer:\n\trocketmq.bindings:\n\t\tinput3: {consumer.tags: tagObj}   #订阅 带tag值为tabObj的字符串\n\tbindings:\n\t\tdestination: test-topic1\n')])])]),s("h2",{attrs:{id:"时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),s("ol",[s("li",[t._v("O(1) 常数阶")]),t._v(" "),s("li",[t._v("O(logn) 对数阶")]),t._v(" "),s("li",[t._v("O(n) 线性阶")]),t._v(" "),s("li",[t._v("O(n的平方) 平方阶")]),t._v(" "),s("li",[t._v("O(n的立方) 立方阶")]),t._v(" "),s("li",[t._v("O(2的n次方) (指数阶)")])]),t._v(" "),s("p",[t._v("二插查找树：查询平均复杂度O(log n)；实在不平衡，变成链表O(n)")]),t._v(" "),s("p",[t._v("平衡二叉树：查找、插入、删除：O(log n)")]),t._v(" "),s("p",[t._v("红黑树：红黑树同时引入了颜色，当插入或删除数据时，只需要进行O(1)次数的旋转以及变色就能保证基本的平衡，不需要像AVL树进行O(lgn)次数的旋转。总的来说，红黑树的统计性能高于AVL")]),t._v(" "),s("p",[t._v("递归：")]),t._v(" "),s("p",[t._v("​\tmaster公式：T(N) = a * T(N/b) + O(N^d)")]),t._v(" "),s("p",[t._v("​\t时间复杂度：")]),t._v(" "),s("p",[t._v("​\t\tlog(b, a) < d\t\tBigO(N^d)")]),t._v(" "),s("p",[t._v("​\t\tlog(b, a) > d\t\tBigO(N^log(b, a))")]),t._v(" "),s("p",[t._v("​\t\tlog(b, a) = d\t\tBigO(N^(d * logN))")]),t._v(" "),s("h2",{attrs:{id:"socket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[t._v("#")]),t._v(" Socket")]),t._v(" "),s("p",[t._v("1.流程")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images.cnblogs.com/cnblogs_com/goodcandle/socket3.jpg",alt:"img"}})]),t._v(" "),s("p",[t._v("服务端：")]),t._v(" "),s("p",[t._v("​\t①通过socket()函数创建socket连接；")]),t._v(" "),s("p",[t._v("​\t②调用bind()函数绑定地址，ipv4 ipv6等格式")]),t._v(" "),s("p",[t._v("​\t③调用listen()函数监听")]),t._v(" "),s("p",[t._v("​\t③调用accept()函数阻塞，等待接收客户端的连接请求")]),t._v(" "),s("p",[t._v("​\t④read()、write()函数")]),t._v(" "),s("p",[t._v("客户端：")]),t._v(" "),s("p",[t._v("​\t①通过socket()函数创建socket连接；")]),t._v(" "),s("p",[t._v("​\t②调用connect()函数像服务器发送连接请求；")]),t._v(" "),s("p",[t._v("​\t③调用close()函数结束连接")]),t._v(" "),s("p",[t._v("2.三次握手")]),t._v(" "),s("p",[t._v("​\t①客户端向服务端发起连接请求：SYN = a")]),t._v(" "),s("p",[t._v("​\t②服务器响应①的请求：SYN = b, ACK = a+1")]),t._v(" "),s("p",[t._v("​\t③客户端告诉服务端，我已经知道你响应了，我们开始传输吧：ACK = b+1")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157476286.png",alt:"image"}})]),t._v(" "),s("p",[t._v("3.四次挥手")]),t._v(" "),s("p",[t._v("​\t①客户端向服务端发起结束连接请求：FIN = x")]),t._v(" "),s("p",[t._v("​\t②服务端响应①的请求：FIN = y，ACK = x+1，服务端响应后接着处理没有write完的任务")]),t._v(" "),s("p",[t._v("​\t③服务端执行完成后，通知客户端我完成了所有的任务，可以关闭了：FIN = z")]),t._v(" "),s("p",[t._v("​\t④客户端响应③的通知，说我知道你完事了，那我们分手吧：ACK = z+1")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157494693.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"学习计划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习计划"}},[t._v("#")]),t._v(" 学习计划")]),t._v(" "),s("ul",[s("li",[t._v("[ ] 日志打印：logback-spring.xml\n"),s("ul",[s("li",[t._v("[x] https://blog.csdn.net/xu_san_duo/article/details/80364600")]),t._v(" "),s("li",[t._v("[x] https://www.cnblogs.com/xiang--liu/p/9710209.html")])])]),t._v(" "),s("li",[t._v("[x] p6spy")]),t._v(" "),s("li",[t._v("[x] github.io")]),t._v(" "),s("li",[t._v("[ ] mybatis.plus\n"),s("ul",[s("li",[t._v("[ ] https://mybatis.plus/guide/quick-start.html")]),t._v(" "),s("li",[t._v("[ ] MyBatis-plus 源码解析  https://blog.csdn.net/weixin_45505313/article/details/104855453")])])]),t._v(" "),s("li",[t._v("[ ] 链路监控\n"),s("ul",[s("li",[t._v("[ ] Pinpoint\n"),s("ul",[s("li",[t._v("[ ] https://www.cnblogs.com/yyhh/p/6106472.html")]),t._v(" "),s("li",[t._v("[ ] https://github.com/pinpoint-apm/pinpoint")]),t._v(" "),s("li",[t._v("[ ] https://blog.csdn.net/sanyaoxu_2/article/details/88671043")])])])])]),t._v(" "),s("li",[t._v("[ ] https://gitee.com/zuihou111/lamp-cloud 等等spring cloud项目")]),t._v(" "),s("li",[t._v("[ ] github spring cloud项目\n"),s("ul",[s("li",[t._v("[ ] https://github.com/spring-cloud/spring-cloud-gateway")]),t._v(" "),s("li",[t._v("[ ] https://github.com/sqshq/piggymetrics")]),t._v(" "),s("li",[t._v("[ ] https://github.com/paascloud/paascloud-master")]),t._v(" "),s("li",[t._v("[ ] https://github.com/zhoutaoo/SpringCloud")]),t._v(" "),s("li",[t._v("[ ] https://github.com/ityouknow/spring-cloud-examples")]),t._v(" "),s("li",[t._v("[ ] https://github.com/chillzhuang/SpringBlade")])])]),t._v(" "),s("li",[t._v("[ ] 监控")])]),t._v(" "),s("ol",[s("li",[t._v("3123")]),t._v(" "),s("li",[t._v("312321312")]),t._v(" "),s("li",[t._v("213321")])])])}),[],!1,null,null,null);a.default=r.exports}}]);